
TacometroComVisorNokia5110.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000231e  000023b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000440  00800138  00800138  000023ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002488  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044ec  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d84  00000000  00000000  00006ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024a4  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  00009f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dc6  00000000  00000000  0000aab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043ee  00000000  00000000  0000b87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000fc68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_7>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_20>
      54:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_21>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	ee e1       	ldi	r30, 0x1E	; 30
     2bc:	f3 e2       	ldi	r31, 0x23	; 35
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a8 33       	cpi	r26, 0x38	; 56
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	a8 e3       	ldi	r26, 0x38	; 56
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a8 37       	cpi	r26, 0x78	; 120
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 ad 06 	call	0xd5a	; 0xd5a <main>
     2de:	0c 94 8d 11 	jmp	0x231a	; 0x231a <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <USART_Init>:

unsigned char USART_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));              // ESPERA O DADO SER RECEBIDO
	return UDR0;                                 // LE O DADO RECEBIDO E RETORNA
}
     2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     2ee:	88 ed       	ldi	r24, 0xD8	; 216
     2f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     2fa:	08 95       	ret

000002fc <__vector_18>:

ISR(USART_RX_vect)
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
	c_usart_recebido = UDR0;
     31e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     322:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <c_usart_recebido>
	
	if(c_usart_recebido == 'l')                            // LIMPAR TEMPERATURA MÁXIMA DA BATERIA
     326:	8c 36       	cpi	r24, 0x6C	; 108
     328:	29 f4       	brne	.+10     	; 0x334 <__vector_18+0x38>
	{
		eeprom_write_byte((uint8_t*)5, 0x00);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	85 e0       	ldi	r24, 0x05	; 5
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 38 11 	call	0x2270	; 0x2270 <eeprom_write_byte>
		   
	}
	if(c_usart_recebido == 'v')
     334:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c_usart_recebido>
     338:	86 37       	cpi	r24, 0x76	; 118
     33a:	31 f4       	brne	.+12     	; 0x348 <__vector_18+0x4c>
	{
		vigilante = 0xFF;
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <vigilante>
		PORTC |= 0b00001000;
     342:	88 b1       	in	r24, 0x08	; 8
     344:	88 60       	ori	r24, 0x08	; 8
     346:	88 b9       	out	0x08, r24	; 8
	}
	if(c_usart_recebido == 'f')
     348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c_usart_recebido>
     34c:	86 36       	cpi	r24, 0x66	; 102
     34e:	29 f4       	brne	.+10     	; 0x35a <__vector_18+0x5e>
	{
		vigilante = 0;
     350:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <vigilante>
		PORTC &= 0b11110111;
     354:	88 b1       	in	r24, 0x08	; 8
     356:	87 7f       	andi	r24, 0xF7	; 247
     358:	88 b9       	out	0x08, r24	; 8
	}
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	1f 90       	pop	r1
     37a:	18 95       	reti

0000037c <__vector_20>:

ISR(USART_TX_vect)
{
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	8f 93       	push	r24
	flag_send = 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <flag_send>
}
     38e:	8f 91       	pop	r24
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_10>:

ISR(TIMER1_CAPT_vect)                            // Interrupção por captura do valor de TC1
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	4f 93       	push	r20
     3a6:	5f 93       	push	r21
     3a8:	6f 93       	push	r22
     3aa:	7f 93       	push	r23
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	af 93       	push	r26
     3b2:	bf 93       	push	r27
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	if(TCCR1B & (1 << ICES1))					 // Lê o valor da contagem do TC1 na borda de subida           
     3b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     3bc:	86 ff       	sbrs	r24, 6
     3be:	0f c0       	rjmp	.+30     	; 0x3de <__vector_10+0x44>
		instante_borda_subida_PB0 = ICR1;        // salva instante da subida 16bits
     3c0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     3c4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <instante_borda_subida_PB0>
     3d0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <instante_borda_subida_PB0+0x1>
     3d4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <instante_borda_subida_PB0+0x2>
     3d8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <instante_borda_subida_PB0+0x3>
     3dc:	22 c0       	rjmp	.+68     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	else                                         // Lê o valor da contagem na borda de descida do sinal
		tempo_delta = (ICR1 - instante_borda_subida_PB0) * 4; // cada incremento de TC1 corresponde a 0.5us
     3de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     3e2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     3e6:	a0 e0       	ldi	r26, 0x00	; 0
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <instante_borda_subida_PB0>
     3ee:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <instante_borda_subida_PB0+0x1>
     3f2:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <instante_borda_subida_PB0+0x2>
     3f6:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <instante_borda_subida_PB0+0x3>
     3fa:	84 1b       	sub	r24, r20
     3fc:	95 0b       	sbc	r25, r21
     3fe:	a6 0b       	sbc	r26, r22
     400:	b7 0b       	sbc	r27, r23
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	aa 1f       	adc	r26, r26
     408:	bb 1f       	adc	r27, r27
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	aa 1f       	adc	r26, r26
     410:	bb 1f       	adc	r27, r27
     412:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tempo_delta>
     416:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tempo_delta+0x1>
     41a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <tempo_delta+0x2>
     41e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <tempo_delta+0x3>
	TCCR1B ^= (1 << ICES1);                      // inverte a borda de captura
     422:	e1 e8       	ldi	r30, 0x81	; 129
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	90 81       	ld	r25, Z
     428:	80 e4       	ldi	r24, 0x40	; 64
     42a:	89 27       	eor	r24, r25
     42c:	80 83       	st	Z, r24
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_7>:

ISR(TIMER2_COMPA_vect)                           //Interrupção do TC0 a cada 100us = (8 * (199 + 1)) / 16MHz
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
	tempo_100us++;
     45e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <tempo_100us>
     462:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <tempo_100us+0x1>
     466:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <tempo_100us+0x2>
     46a:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <tempo_100us+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <tempo_100us>
     478:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <tempo_100us+0x1>
     47c:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <tempo_100us+0x2>
     480:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <tempo_100us+0x3>
	// PORTC ^= 0b1000000;                          // Inverte estado de PB7 a cada 200us -> 5khz
}
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <__vector_1>:

ISR(INT0_vect)                                   // Interrupção PD2 sensor hall roda Calcula periodo de rotação da roda em 100us a cada descida do sensor hall
{												   
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	8f 92       	push	r8
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	2f 93       	push	r18
     4b2:	3f 93       	push	r19
     4b4:	4f 93       	push	r20
     4b6:	5f 93       	push	r21
     4b8:	6f 93       	push	r22
     4ba:	7f 93       	push	r23
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	af 93       	push	r26
     4c2:	bf 93       	push	r27
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
	static uint32_t instante_100us_anterior = 0;
	uint32_t  instante_100us = tempo_100us;
     4c8:	c0 90 6b 01 	lds	r12, 0x016B	; 0x80016b <tempo_100us>
     4cc:	d0 90 6c 01 	lds	r13, 0x016C	; 0x80016c <tempo_100us+0x1>
     4d0:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <tempo_100us+0x2>
     4d4:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <tempo_100us+0x3>
	
	periodoRotacao_100us = instante_100us - instante_100us_anterior;
     4d8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <instante_100us_anterior.2560>
     4dc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <instante_100us_anterior.2560+0x1>
     4e0:	96 01       	movw	r18, r12
     4e2:	28 1b       	sub	r18, r24
     4e4:	39 0b       	sbc	r19, r25
     4e6:	30 93 5d 01 	sts	0x015D, r19	; 0x80015d <periodoRotacao_100us+0x1>
     4ea:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <periodoRotacao_100us>
	
	// Realiza o cálculo da distância percorrida a cada giro da roda
		
	distanciaPercorrida_cm += diametro_cm * PI; // fazer a cada rotação
     4ee:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <diametro_cm>
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     4fc:	2b ed       	ldi	r18, 0xDB	; 219
     4fe:	3f e0       	ldi	r19, 0x0F	; 15
     500:	49 e4       	ldi	r20, 0x49	; 73
     502:	50 e4       	ldi	r21, 0x40	; 64
     504:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__mulsf3>
     508:	4b 01       	movw	r8, r22
     50a:	5c 01       	movw	r10, r24
     50c:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <distanciaPercorrida_cm>
     510:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <distanciaPercorrida_cm+0x1>
     514:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <distanciaPercorrida_cm+0x2>
     518:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <distanciaPercorrida_cm+0x3>
     51c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     520:	a5 01       	movw	r20, r10
     522:	94 01       	movw	r18, r8
     524:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__addsf3>
     528:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
     52c:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <distanciaPercorrida_cm>
     530:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <distanciaPercorrida_cm+0x1>
     534:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <distanciaPercorrida_cm+0x2>
     538:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <distanciaPercorrida_cm+0x3>
	//distanciaPercorrida_km = distanciaPercorrida_cm / 100000;
		
	instante_100us_anterior = instante_100us;    	
     53c:	c0 92 4a 01 	sts	0x014A, r12	; 0x80014a <instante_100us_anterior.2560>
     540:	d0 92 4b 01 	sts	0x014B, r13	; 0x80014b <instante_100us_anterior.2560+0x1>
     544:	e0 92 4c 01 	sts	0x014C, r14	; 0x80014c <instante_100us_anterior.2560+0x2>
     548:	f0 92 4d 01 	sts	0x014D, r15	; 0x80014d <instante_100us_anterior.2560+0x3>
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	9f 90       	pop	r9
     572:	8f 90       	pop	r8
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_21>:

ISR(ADC_vect)                                    // Interrupção contínua do ADC
{
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
	leitura_ADC = ADC;
     58c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     590:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     594:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <leitura_ADC+0x1>
     598:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <leitura_ADC>
}
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	0f 90       	pop	r0
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	0f 90       	pop	r0
     5a6:	1f 90       	pop	r1
     5a8:	18 95       	reti

000005aa <__vector_5>:

ISR(PCINT2_vect)                                 // Interrupção por mudança de pino na porta D, LÊ BOTÕES E SALVA EEPROM
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
	if((PIND & 0b00010000) == 0)                 // BOTÃO '+' PD4
     5cc:	4c 99       	sbic	0x09, 4	; 9
     5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <__vector_5+0x3c>
	{
		if(diametro_cm < 200)
     5d0:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <diametro_cm>
     5d4:	68 3c       	cpi	r22, 0xC8	; 200
     5d6:	38 f4       	brcc	.+14     	; 0x5e6 <__vector_5+0x3c>
		{
			diametro_cm++;
     5d8:	6f 5f       	subi	r22, 0xFF	; 255
     5da:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <diametro_cm>
			eeprom_update_byte((uint8_t*)0, diametro_cm);    // ATUALIZA EEPROM
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 1a 11 	call	0x2234	; 0x2234 <eeprom_update_byte>
		}
		
	}
	if((PIND & 0b00100000) == 0)                 // BOTÃO '-' PD5
     5e6:	4d 99       	sbic	0x09, 5	; 9
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <__vector_5+0x56>
	{
		if(diametro_cm > 1)
     5ea:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <diametro_cm>
     5ee:	62 30       	cpi	r22, 0x02	; 2
     5f0:	38 f0       	brcs	.+14     	; 0x600 <__vector_5+0x56>
		{
			diametro_cm--;
     5f2:	61 50       	subi	r22, 0x01	; 1
     5f4:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <diametro_cm>
			eeprom_update_byte((uint8_t*)0, diametro_cm);    // ATUALIZA EEPROM
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 1a 11 	call	0x2234	; 0x2234 <eeprom_update_byte>
		}
		
	}
	if((PIND & 0b00001000) == 0)                 // MARCHA DRIVE PD3
     600:	4b 99       	sbic	0x09, 3	; 9
     602:	04 c0       	rjmp	.+8      	; 0x60c <__vector_5+0x62>
	{
		marcha = 'D';
     604:	84 e4       	ldi	r24, 0x44	; 68
     606:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <marcha>
     60a:	03 c0       	rjmp	.+6      	; 0x612 <__vector_5+0x68>
	}
	else                                         // MARCHA REVERSE
	{
		marcha = 'R';
     60c:	82 e5       	ldi	r24, 0x52	; 82
     60e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <marcha>
	}
	if((PIND & 0b10000000) == 0)                 // MARCHA PARK PD7
     612:	4f 99       	sbic	0x09, 7	; 9
     614:	03 c0       	rjmp	.+6      	; 0x61c <__vector_5+0x72>
	{
		marcha = 'P'; 
     616:	80 e5       	ldi	r24, 0x50	; 80
     618:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <marcha>
// 			vigilante = 0xFF;                     
// 		}
// 		
		
	
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <visorBCD>:


void visorBCD(uint16_t v_atual)                  // Função que exibe velocidadeVeiculo_kmph no BCD a cada momento que é chamada
{
     63e:	ac 01       	movw	r20, r24
	static uint8_t pos = 0;                      // variavel do display 7seg que será exibido no momento
		
	switch (pos)
     640:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <pos.2575>
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	59 f1       	breq	.+86     	; 0x69e <visorBCD+0x60>
     648:	20 f0       	brcs	.+8      	; 0x652 <visorBCD+0x14>
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	09 f4       	brne	.+2      	; 0x650 <visorBCD+0x12>
     64e:	56 c0       	rjmp	.+172    	; 0x6fc <visorBCD+0xbe>
     650:	85 c0       	rjmp	.+266    	; 0x75c <visorBCD+0x11e>
	{
		case 0: // 001 unidades
		  //PORTB =  0b1100000x;                   // Zera saída PB1..PB4, seta 0 no PB5 7seg de unidades 100
			PORTB &= 0b11000001;                   // PB0 inalterado
     652:	85 b1       	in	r24, 0x05	; 5
     654:	81 7c       	andi	r24, 0xC1	; 193
     656:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b11000000;
     658:	85 b1       	in	r24, 0x05	; 5
     65a:	80 6c       	ori	r24, 0xC0	; 192
     65c:	85 b9       	out	0x05, r24	; 5
			uint8_t num = ((v_atual/1)%10 << 1) & 0b00011110;
     65e:	9a 01       	movw	r18, r20
     660:	ad ec       	ldi	r26, 0xCD	; 205
     662:	bc ec       	ldi	r27, 0xCC	; 204
     664:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     668:	96 95       	lsr	r25
     66a:	87 95       	ror	r24
     66c:	96 95       	lsr	r25
     66e:	87 95       	ror	r24
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	9c 01       	movw	r18, r24
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	9a 01       	movw	r18, r20
     68c:	28 1b       	sub	r18, r24
     68e:	39 0b       	sbc	r19, r25
     690:	c9 01       	movw	r24, r18
     692:	88 0f       	add	r24, r24
     694:	8e 71       	andi	r24, 0x1E	; 30
			PORTB |= num;   
     696:	95 b1       	in	r25, 0x05	; 5
     698:	89 2b       	or	r24, r25
     69a:	85 b9       	out	0x05, r24	; 5
		break;
     69c:	5f c0       	rjmp	.+190    	; 0x75c <visorBCD+0x11e>
		case 1: // 010 dezenas
		  //PORTB =  0b1010000x;                 // Zera saída PB1..PB4, seta 0 no PB6 7seg de dezenas (010)
			PORTB &= 0b10100001;                 // PB0 inalterado
     69e:	85 b1       	in	r24, 0x05	; 5
     6a0:	81 7a       	andi	r24, 0xA1	; 161
     6a2:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b10100000;
     6a4:	85 b1       	in	r24, 0x05	; 5
     6a6:	80 6a       	ori	r24, 0xA0	; 160
     6a8:	85 b9       	out	0x05, r24	; 5
			PORTB |= (((v_atual/10)%10)<<1);
     6aa:	e5 b1       	in	r30, 0x05	; 5
     6ac:	9a 01       	movw	r18, r20
     6ae:	ad ec       	ldi	r26, 0xCD	; 205
     6b0:	bc ec       	ldi	r27, 0xCC	; 204
     6b2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     6b6:	ac 01       	movw	r20, r24
     6b8:	56 95       	lsr	r21
     6ba:	47 95       	ror	r20
     6bc:	56 95       	lsr	r21
     6be:	47 95       	ror	r20
     6c0:	56 95       	lsr	r21
     6c2:	47 95       	ror	r20
     6c4:	9a 01       	movw	r18, r20
     6c6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	96 95       	lsr	r25
     6d0:	87 95       	ror	r24
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	9c 01       	movw	r18, r24
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
     6ec:	9a 01       	movw	r18, r20
     6ee:	28 1b       	sub	r18, r24
     6f0:	39 0b       	sbc	r19, r25
     6f2:	c9 01       	movw	r24, r18
     6f4:	88 0f       	add	r24, r24
     6f6:	8e 2b       	or	r24, r30
     6f8:	85 b9       	out	0x05, r24	; 5
		break;
     6fa:	30 c0       	rjmp	.+96     	; 0x75c <visorBCD+0x11e>
		case 2: // 100 centenas
		  //PORTB =  0b0110000x;                 // Zera saída PB1..PB4, seta 0 no PB7 7seg de centenas (110)
			PORTB &= 0b01100001;                 // PB0 inalterado
     6fc:	85 b1       	in	r24, 0x05	; 5
     6fe:	81 76       	andi	r24, 0x61	; 97
     700:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b01100000;
     702:	85 b1       	in	r24, 0x05	; 5
     704:	80 66       	ori	r24, 0x60	; 96
     706:	85 b9       	out	0x05, r24	; 5
			PORTB |= (((v_atual/100)%10)<<1);
     708:	e5 b1       	in	r30, 0x05	; 5
     70a:	9a 01       	movw	r18, r20
     70c:	36 95       	lsr	r19
     70e:	27 95       	ror	r18
     710:	36 95       	lsr	r19
     712:	27 95       	ror	r18
     714:	ab e7       	ldi	r26, 0x7B	; 123
     716:	b4 e1       	ldi	r27, 0x14	; 20
     718:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     71c:	ac 01       	movw	r20, r24
     71e:	56 95       	lsr	r21
     720:	47 95       	ror	r20
     722:	9a 01       	movw	r18, r20
     724:	ad ec       	ldi	r26, 0xCD	; 205
     726:	bc ec       	ldi	r27, 0xCC	; 204
     728:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     72c:	96 95       	lsr	r25
     72e:	87 95       	ror	r24
     730:	96 95       	lsr	r25
     732:	87 95       	ror	r24
     734:	96 95       	lsr	r25
     736:	87 95       	ror	r24
     738:	9c 01       	movw	r18, r24
     73a:	22 0f       	add	r18, r18
     73c:	33 1f       	adc	r19, r19
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	82 0f       	add	r24, r18
     74c:	93 1f       	adc	r25, r19
     74e:	9a 01       	movw	r18, r20
     750:	28 1b       	sub	r18, r24
     752:	39 0b       	sbc	r19, r25
     754:	c9 01       	movw	r24, r18
     756:	88 0f       	add	r24, r24
     758:	8e 2b       	or	r24, r30
     75a:	85 b9       	out	0x05, r24	; 5
		break;		
	}
	//0,1,2->
	pos == 2 ? pos = 0 : pos++;                  // incrementa ou zera contador 0..3
     75c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <pos.2575>
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	19 f4       	brne	.+6      	; 0x76a <visorBCD+0x12c>
     764:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <pos.2575>
     768:	08 95       	ret
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <pos.2575>
     770:	08 95       	ret

00000772 <calculosTelemetria>:
	
} 

void calculosTelemetria()
{
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
	// velocidade do veiculo kmph
	
	velocidadeVeiculo_kmph = diametro_cm * PI * 360;
     782:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <diametro_cm>
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     790:	2b ed       	ldi	r18, 0xDB	; 219
     792:	3f e0       	ldi	r19, 0x0F	; 15
     794:	49 e4       	ldi	r20, 0x49	; 73
     796:	50 e4       	ldi	r21, 0x40	; 64
     798:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__mulsf3>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	44 eb       	ldi	r20, 0xB4	; 180
     7a2:	53 e4       	ldi	r21, 0x43	; 67
     7a4:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__mulsf3>
     7a8:	4b 01       	movw	r8, r22
     7aa:	5c 01       	movw	r10, r24
	velocidadeVeiculo_kmph = velocidadeVeiculo_kmph / periodoRotacao_100us;
     7ac:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <periodoRotacao_100us>
     7b0:	d0 90 5d 01 	lds	r13, 0x015D	; 0x80015d <periodoRotacao_100us+0x1>
     7b4:	e1 2c       	mov	r14, r1
     7b6:	f1 2c       	mov	r15, r1
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	c5 01       	movw	r24, r10
     7c6:	b4 01       	movw	r22, r8
     7c8:	0e 94 15 0c 	call	0x182a	; 0x182a <__divsf3>
     7cc:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <velocidadeVeiculo_kmph>
     7d0:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <velocidadeVeiculo_kmph+0x1>
     7d4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <velocidadeVeiculo_kmph+0x2>
     7d8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <velocidadeVeiculo_kmph+0x3>
	 
	RPM = 600000 / periodoRotacao_100us;  
     7dc:	60 ec       	ldi	r22, 0xC0	; 192
     7de:	77 e2       	ldi	r23, 0x27	; 39
     7e0:	89 e0       	ldi	r24, 0x09	; 9
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a7 01       	movw	r20, r14
     7e6:	96 01       	movw	r18, r12
     7e8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__divmodsi4>
     7ec:	ca 01       	movw	r24, r20
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     7f4:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <RPM>
     7f8:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <RPM+0x1>
     7fc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <RPM+0x2>
     800:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <RPM+0x3>
	
	static float distanciaPercorrida_cm_passado = 0;
	
	sonar_cm_8 = (int)tempo_delta/58;                                         // atualiza distancia sonar
     804:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_delta>
     808:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_delta+0x1>
     80c:	6a e3       	ldi	r22, 0x3A	; 58
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__divmodhi4>
     814:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <sonar_cm_8+0x1>
     818:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <sonar_cm_8>
	
	// Salvar na EEPROM 
	
	if (distanciaPercorrida_cm - distanciaPercorrida_cm_passado >= 100000.0)     // A cada 1km adicionado ao Hodômetro será salvo na EEPROM
     81c:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <distanciaPercorrida_cm>
     820:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <distanciaPercorrida_cm+0x1>
     824:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <distanciaPercorrida_cm+0x2>
     828:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <distanciaPercorrida_cm+0x3>
     82c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     830:	6b 01       	movw	r12, r22
     832:	7c 01       	movw	r14, r24
     834:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <distanciaPercorrida_cm_passado.2583>
     838:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <distanciaPercorrida_cm_passado.2583+0x1>
     83c:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <distanciaPercorrida_cm_passado.2583+0x2>
     840:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <distanciaPercorrida_cm_passado.2583+0x3>
     844:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__subsf3>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e5       	ldi	r19, 0x50	; 80
     84c:	43 ec       	ldi	r20, 0xC3	; 195
     84e:	57 e4       	ldi	r21, 0x47	; 71
     850:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__gesf2>
     854:	88 23       	and	r24, r24
     856:	d4 f0       	brlt	.+52     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
	{
		while(!eeprom_is_ready());
     858:	f9 99       	sbic	0x1f, 1	; 31
     85a:	fe cf       	rjmp	.-4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		eeprom_update_float((float*)1, distanciaPercorrida_cm);
     85c:	b7 01       	movw	r22, r14
     85e:	a6 01       	movw	r20, r12
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 2c 11 	call	0x2258	; 0x2258 <eeprom_update_dword>
		distanciaPercorrida_cm_passado = distanciaPercorrida_cm;
     868:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <distanciaPercorrida_cm>
     86c:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <distanciaPercorrida_cm+0x1>
     870:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <distanciaPercorrida_cm+0x2>
     874:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <distanciaPercorrida_cm+0x3>
     878:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     87c:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <distanciaPercorrida_cm_passado.2583>
     880:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <distanciaPercorrida_cm_passado.2583+0x1>
     884:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <distanciaPercorrida_cm_passado.2583+0x2>
     888:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <distanciaPercorrida_cm_passado.2583+0x3>
	}
	
}
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	08 95       	ret

0000089e <envia2algarismos>:
void leitura_sensores_ADC();
void visor_oled();

void envia2algarismos(void)
{
	if(c_usart_recebido == 'd')
     89e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c_usart_recebido>
     8a2:	84 36       	cpi	r24, 0x64	; 100
     8a4:	b9 f4       	brne	.+46     	; 0x8d4 <envia2algarismos+0x36>
	{
		UDR0 = (unsigned char)((temperatura_maxima_bat/10)%10);        // DEZENAS PRIMEIRO
     8a6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8aa:	8d ec       	ldi	r24, 0xCD	; 205
     8ac:	98 9f       	mul	r25, r24
     8ae:	91 2d       	mov	r25, r1
     8b0:	11 24       	eor	r1, r1
     8b2:	96 95       	lsr	r25
     8b4:	96 95       	lsr	r25
     8b6:	96 95       	lsr	r25
     8b8:	98 9f       	mul	r25, r24
     8ba:	81 2d       	mov	r24, r1
     8bc:	11 24       	eor	r1, r1
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	86 95       	lsr	r24
     8c4:	88 0f       	add	r24, r24
     8c6:	28 2f       	mov	r18, r24
     8c8:	22 0f       	add	r18, r18
     8ca:	22 0f       	add	r18, r18
     8cc:	82 0f       	add	r24, r18
     8ce:	98 1b       	sub	r25, r24
     8d0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	
	if(flag_send)   // FLAG DA ULTIMA TRANSFERENCIA CONCLUÍDA
     8d4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <flag_send>
     8d8:	88 23       	and	r24, r24
     8da:	99 f0       	breq	.+38     	; 0x902 <__stack+0x3>
	{
		UDR0 = (unsigned char)((temperatura_maxima_bat/1)%10);     // ENVIA UNIDADES
     8dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8e0:	8d ec       	ldi	r24, 0xCD	; 205
     8e2:	28 9f       	mul	r18, r24
     8e4:	81 2d       	mov	r24, r1
     8e6:	11 24       	eor	r1, r1
     8e8:	86 95       	lsr	r24
     8ea:	86 95       	lsr	r24
     8ec:	86 95       	lsr	r24
     8ee:	88 0f       	add	r24, r24
     8f0:	98 2f       	mov	r25, r24
     8f2:	99 0f       	add	r25, r25
     8f4:	99 0f       	add	r25, r25
     8f6:	89 0f       	add	r24, r25
     8f8:	28 1b       	sub	r18, r24
     8fa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		flag_send=0;
     8fe:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <flag_send>
     902:	08 95       	ret

00000904 <_6_ms>:
	}
}

void _6_ms(uint32_t instante_100us)              // 167hz taxa de atualização
{
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
	static uint32_t instante_100us_anterior = 0;
	
	if ((instante_100us - instante_100us_anterior) >= 60) // 60 * 100u = 0.006 
     90c:	c0 90 41 01 	lds	r12, 0x0141	; 0x800141 <instante_100us_anterior.2595>
     910:	d0 90 42 01 	lds	r13, 0x0142	; 0x800142 <instante_100us_anterior.2595+0x1>
     914:	e0 90 43 01 	lds	r14, 0x0143	; 0x800143 <instante_100us_anterior.2595+0x2>
     918:	f0 90 44 01 	lds	r15, 0x0144	; 0x800144 <instante_100us_anterior.2595+0x3>
     91c:	9b 01       	movw	r18, r22
     91e:	ac 01       	movw	r20, r24
     920:	2c 19       	sub	r18, r12
     922:	3d 09       	sbc	r19, r13
     924:	4e 09       	sbc	r20, r14
     926:	5f 09       	sbc	r21, r15
     928:	69 01       	movw	r12, r18
     92a:	7a 01       	movw	r14, r20
     92c:	3c e3       	ldi	r19, 0x3C	; 60
     92e:	c3 16       	cp	r12, r19
     930:	d1 04       	cpc	r13, r1
     932:	e1 04       	cpc	r14, r1
     934:	f1 04       	cpc	r15, r1
     936:	b8 f0       	brcs	.+46     	; 0x966 <_6_ms+0x62>
     938:	6b 01       	movw	r12, r22
     93a:	7c 01       	movw	r14, r24
	{
		//Tarefa
		visorBCD((int)velocidadeVeiculo_kmph);                  
     93c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <velocidadeVeiculo_kmph>
     940:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <velocidadeVeiculo_kmph+0x1>
     944:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <velocidadeVeiculo_kmph+0x2>
     948:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <velocidadeVeiculo_kmph+0x3>
     94c:	0e 94 87 0c 	call	0x190e	; 0x190e <__fixsfsi>
     950:	cb 01       	movw	r24, r22
     952:	0e 94 1f 03 	call	0x63e	; 0x63e <visorBCD>
		//PORTB ^= 0b10000000;
		instante_100us_anterior = instante_100us;
     956:	c0 92 41 01 	sts	0x0141, r12	; 0x800141 <instante_100us_anterior.2595>
     95a:	d0 92 42 01 	sts	0x0142, r13	; 0x800142 <instante_100us_anterior.2595+0x1>
     95e:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <instante_100us_anterior.2595+0x2>
     962:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <instante_100us_anterior.2595+0x3>
	}
}
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	08 95       	ret

00000970 <visor_oled>:
	}
}


void visor_oled()
{
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	6e 97       	sbiw	r28, 0x1e	; 30
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
	char rpm[6];
	//rpm[5] = '\0';                              
	char dia_cm[4];
	char adc[4];
	char sonar_cm[4];
	sonar_cm[5] = '\0';
     988:	18 8e       	std	Y+24, r1	; 0x18
	char v_bateria[4];
	char t_bateria[4];
	
	
	sprintf(dis_km_str, "%u", (int)(distanciaPercorrida_cm/100000));
     98a:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <distanciaPercorrida_cm>
     98e:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <distanciaPercorrida_cm+0x1>
     992:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <distanciaPercorrida_cm+0x2>
     996:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <distanciaPercorrida_cm+0x3>
     99a:	20 ea       	ldi	r18, 0xA0	; 160
     99c:	36 e8       	ldi	r19, 0x86	; 134
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__udivmodsi4>
     9a6:	3f 93       	push	r19
     9a8:	2f 93       	push	r18
     9aa:	07 e0       	ldi	r16, 0x07	; 7
     9ac:	11 e0       	ldi	r17, 0x01	; 1
     9ae:	1f 93       	push	r17
     9b0:	0f 93       	push	r16
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	sprintf(rpm, "%u", (int)RPM); //RPM
     9be:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <RPM>
     9c2:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <RPM+0x1>
     9c6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <RPM+0x2>
     9ca:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <RPM+0x3>
     9ce:	0e 94 87 0c 	call	0x190e	; 0x190e <__fixsfsi>
     9d2:	7f 93       	push	r23
     9d4:	6f 93       	push	r22
     9d6:	1f 93       	push	r17
     9d8:	0f 93       	push	r16
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	sprintf(dia_cm, "%u", diametro_cm);
     9e6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diametro_cm>
     9ea:	1f 92       	push	r1
     9ec:	8f 93       	push	r24
     9ee:	1f 93       	push	r17
     9f0:	0f 93       	push	r16
     9f2:	ce 01       	movw	r24, r28
     9f4:	0b 96       	adiw	r24, 0x0b	; 11
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	sprintf(adc, "%u", leitura_ADC);
     9fe:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <leitura_ADC+0x1>
     a02:	8f 93       	push	r24
     a04:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <leitura_ADC>
     a08:	8f 93       	push	r24
     a0a:	1f 93       	push	r17
     a0c:	0f 93       	push	r16
     a0e:	ce 01       	movw	r24, r28
     a10:	0f 96       	adiw	r24, 0x0f	; 15
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	sprintf(sonar_cm, "%u", sonar_cm_8);
     a1a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sonar_cm_8+0x1>
     a1e:	8f 93       	push	r24
     a20:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sonar_cm_8>
     a24:	8f 93       	push	r24
     a26:	1f 93       	push	r17
     a28:	0f 93       	push	r16
     a2a:	ce 01       	movw	r24, r28
     a2c:	43 96       	adiw	r24, 0x13	; 19
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	
	sprintf(v_bateria, "%u", porcentagem_bateria);
     a36:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <porcentagem_bateria+0x1>
     a3a:	8f 93       	push	r24
     a3c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <porcentagem_bateria>
     a40:	8f 93       	push	r24
     a42:	1f 93       	push	r17
     a44:	0f 93       	push	r16
     a46:	ce 01       	movw	r24, r28
     a48:	47 96       	adiw	r24, 0x17	; 23
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	sprintf(t_bateria, "%u", temperatura_bateria);
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temperatura_bateria+0x1>
     a60:	8f 93       	push	r24
     a62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temperatura_bateria>
     a66:	8f 93       	push	r24
     a68:	1f 93       	push	r17
     a6a:	0f 93       	push	r16
     a6c:	ce 01       	movw	r24, r28
     a6e:	4b 96       	adiw	r24, 0x1b	; 27
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <sprintf>
	
	GLCD_Clear();
     a78:	0e 94 16 0a 	call	0x142c	; 0x142c <GLCD_Clear>
	
	GLCD_GotoXY(1,1);
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString("LASD Car");
     a84:	8a e0       	ldi	r24, 0x0A	; 10
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_DrawLine(1, 10, 50, 10, GLCD_Black);
     a8c:	0f ef       	ldi	r16, 0xFF	; 255
     a8e:	2a e0       	ldi	r18, 0x0A	; 10
     a90:	42 e3       	ldi	r20, 0x32	; 50
     a92:	6a e0       	ldi	r22, 0x0A	; 10
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 15 09 	call	0x122a	; 0x122a <GLCD_DrawLine>
	
	if ( vigilante == 0xFF)
     a9a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <vigilante>
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	8f 3f       	cpi	r24, 0xFF	; 255
     aac:	69 f4       	brne	.+26     	; 0xac8 <visor_oled+0x158>
	{
		GLCD_GotoXY(80, 5);
     aae:	65 e0       	ldi	r22, 0x05	; 5
     ab0:	80 e5       	ldi	r24, 0x50	; 80
     ab2:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
		GLCD_PrintChar('V');                                        // MODO VIGILANTE
     ab6:	86 e5       	ldi	r24, 0x56	; 86
     ab8:	0e 94 49 0a 	call	0x1492	; 0x1492 <GLCD_PrintChar>
		GLCD_DrawRectangle(73, 1, 90, 15, GLCD_Black);              // RETANGULO VIGILANTE
     abc:	2f e0       	ldi	r18, 0x0F	; 15
     abe:	4a e5       	ldi	r20, 0x5A	; 90
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	89 e4       	ldi	r24, 0x49	; 73
     ac4:	0e 94 a8 09 	call	0x1350	; 0x1350 <GLCD_DrawRectangle>
			
	}
	
	GLCD_GotoXY(100, 15);
     ac8:	6f e0       	ldi	r22, 0x0F	; 15
     aca:	84 e6       	ldi	r24, 0x64	; 100
     acc:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString(t_bateria);
     ad0:	ce 01       	movw	r24, r28
     ad2:	4b 96       	adiw	r24, 0x1b	; 27
     ad4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" C");
     ad8:	83 e1       	ldi	r24, 0x13	; 19
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	
	GLCD_GotoXY(100, 3);
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	84 e6       	ldi	r24, 0x64	; 100
     ae4:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString(v_bateria);
     ae8:	ce 01       	movw	r24, r28
     aea:	47 96       	adiw	r24, 0x17	; 23
     aec:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" %");
     af0:	86 e1       	ldi	r24, 0x16	; 22
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	
	GLCD_DrawRectangle(98, 1, 126, 25, GLCD_Black);            // RETANGULO BATERIA + TEMPERATURA
     af8:	0f ef       	ldi	r16, 0xFF	; 255
     afa:	29 e1       	ldi	r18, 0x19	; 25
     afc:	4e e7       	ldi	r20, 0x7E	; 126
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	82 e6       	ldi	r24, 0x62	; 98
     b02:	0e 94 a8 09 	call	0x1350	; 0x1350 <GLCD_DrawRectangle>
	
	GLCD_GotoXY(1, 36);
     b06:	64 e2       	ldi	r22, 0x24	; 36
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString("D. Pneu: ");
     b0e:	89 e1       	ldi	r24, 0x19	; 25
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(dia_cm);
     b16:	ce 01       	movw	r24, r28
     b18:	0b 96       	adiw	r24, 0x0b	; 11
     b1a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" cm");
     b1e:	83 e2       	ldi	r24, 0x23	; 35
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	
	GLCD_GotoXY(1, 26);
     b26:	6a e1       	ldi	r22, 0x1A	; 26
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString("Sonar: ");
     b2e:	87 e2       	ldi	r24, 0x27	; 39
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(sonar_cm);
     b36:	ce 01       	movw	r24, r28
     b38:	43 96       	adiw	r24, 0x13	; 19
     b3a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" cm");
     b3e:	83 e2       	ldi	r24, 0x23	; 35
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	
	GLCD_GotoXY(1, 16);
     b46:	60 e1       	ldi	r22, 0x10	; 16
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString(rpm);
     b4e:	ce 01       	movw	r24, r28
     b50:	05 96       	adiw	r24, 0x05	; 5
     b52:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" rpm");
     b56:	8f e2       	ldi	r24, 0x2F	; 47
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	
	GLCD_GotoXY(20, 52);
     b5e:	64 e3       	ldi	r22, 0x34	; 52
     b60:	84 e1       	ldi	r24, 0x14	; 20
     b62:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintString(dis_km_str);
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_PrintString(" km");
     b6e:	84 e3       	ldi	r24, 0x34	; 52
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GLCD_PrintString>
	GLCD_DrawRectangle(10, 48, 70, 62, GLCD_Black);          // RETANGULO DISTANCIA
     b76:	2e e3       	ldi	r18, 0x3E	; 62
     b78:	46 e4       	ldi	r20, 0x46	; 70
     b7a:	60 e3       	ldi	r22, 0x30	; 48
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	0e 94 a8 09 	call	0x1350	; 0x1350 <GLCD_DrawRectangle>
	
	GLCD_GotoXY(115, 52);
     b82:	64 e3       	ldi	r22, 0x34	; 52
     b84:	83 e7       	ldi	r24, 0x73	; 115
     b86:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
	GLCD_PrintChar(marcha);
     b8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <marcha>
     b8e:	0e 94 49 0a 	call	0x1492	; 0x1492 <GLCD_PrintChar>
	GLCD_DrawRectangle(108, 48, 125, 62, GLCD_Black);        // RETANGULO MARCHA   17x20  xy
     b92:	2e e3       	ldi	r18, 0x3E	; 62
     b94:	4d e7       	ldi	r20, 0x7D	; 125
     b96:	60 e3       	ldi	r22, 0x30	; 48
     b98:	8c e6       	ldi	r24, 0x6C	; 108
     b9a:	0e 94 a8 09 	call	0x1350	; 0x1350 <GLCD_DrawRectangle>
	 
	
	
	GLCD_Render();
     b9e:	0e 94 7e 07 	call	0xefc	; 0xefc <GLCD_Render>
		
}
     ba2:	6e 96       	adiw	r28, 0x1e	; 30
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <_500_ms>:
		instante_100us_anterior = instante_100us;
	}
}

void _500_ms(uint32_t instante_100us)
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
	static uint32_t instante_100_us_anterior_500 = 0;
	
	if ((instante_100us - instante_100_us_anterior_500) >= 5000)
     bc4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <instante_100_us_anterior_500.2603>
     bc8:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <instante_100_us_anterior_500.2603+0x1>
     bcc:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <instante_100_us_anterior_500.2603+0x2>
     bd0:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <instante_100_us_anterior_500.2603+0x3>
     bd4:	a7 01       	movw	r20, r14
     bd6:	96 01       	movw	r18, r12
     bd8:	28 1b       	sub	r18, r24
     bda:	39 0b       	sbc	r19, r25
     bdc:	4a 0b       	sbc	r20, r26
     bde:	5b 0b       	sbc	r21, r27
     be0:	da 01       	movw	r26, r20
     be2:	c9 01       	movw	r24, r18
     be4:	88 38       	cpi	r24, 0x88	; 136
     be6:	93 41       	sbci	r25, 0x13	; 19
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	10 f0       	brcs	.+4      	; 0xbf2 <_500_ms+0x3a>
	{
		visor_oled();
     bee:	0e 94 b8 04 	call	0x970	; 0x970 <visor_oled>
	}
	
	instante_100_us_anterior_500 =  instante_100us;
     bf2:	c0 92 39 01 	sts	0x0139, r12	; 0x800139 <instante_100_us_anterior_500.2603>
     bf6:	d0 92 3a 01 	sts	0x013A, r13	; 0x80013a <instante_100_us_anterior_500.2603+0x1>
     bfa:	e0 92 3b 01 	sts	0x013B, r14	; 0x80013b <instante_100_us_anterior_500.2603+0x2>
     bfe:	f0 92 3c 01 	sts	0x013C, r15	; 0x80013c <instante_100_us_anterior_500.2603+0x3>
}
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	08 95       	ret

00000c0c <leitura_sensores_ADC>:

void leitura_sensores_ADC()
{
	static uint8_t cont_canal = 0;
	
	switch(cont_canal)
     c0c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	61 f1       	breq	.+88     	; 0xc6c <leitura_sensores_ADC+0x60>
     c14:	20 f0       	brcs	.+8      	; 0xc1e <leitura_sensores_ADC+0x12>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	09 f4       	brne	.+2      	; 0xc1c <leitura_sensores_ADC+0x10>
     c1a:	3e c0       	rjmp	.+124    	; 0xc98 <leitura_sensores_ADC+0x8c>
     c1c:	63 c0       	rjmp	.+198    	; 0xce4 <leitura_sensores_ADC+0xd8>
	{
		case 0:  //LEITURA CANAL 0 - PEDAL ACELERADOR
			//pedal = leitura_ADC;
			if (sonar_cm_8 > 300)       // rever
     c1e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sonar_cm_8>
     c22:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <sonar_cm_8+0x1>
     c26:	8d 32       	cpi	r24, 0x2D	; 45
     c28:	91 40       	sbci	r25, 0x01	; 1
     c2a:	50 f0       	brcs	.+20     	; 0xc40 <leitura_sensores_ADC+0x34>
			{
				// PWM CURSO PEDAL /4;
				OCR0A = ADC/4;
     c2c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c30:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c34:	96 95       	lsr	r25
     c36:	87 95       	ror	r24
     c38:	96 95       	lsr	r25
     c3a:	87 95       	ror	r24
     c3c:	87 bd       	out	0x27, r24	; 39
     c3e:	12 c0       	rjmp	.+36     	; 0xc64 <leitura_sensores_ADC+0x58>
			}
			else if(velocidadeVeiculo_kmph > 20)
     c40:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <velocidadeVeiculo_kmph>
     c44:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <velocidadeVeiculo_kmph+0x1>
     c48:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <velocidadeVeiculo_kmph+0x2>
     c4c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <velocidadeVeiculo_kmph+0x3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 ea       	ldi	r20, 0xA0	; 160
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__gesf2>
     c5c:	18 16       	cp	r1, r24
     c5e:	14 f4       	brge	.+4      	; 0xc64 <leitura_sensores_ADC+0x58>
			{
				// PWM LIMITA EM 25;
				OCR0A = 25;
     c60:	89 e1       	ldi	r24, 0x19	; 25
     c62:	87 bd       	out	0x27, r24	; 39
			}
			
			ADMUX = 0b01000001;        // MUDAR PARA CANAL 1
     c64:	81 e4       	ldi	r24, 0x41	; 65
     c66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			
			break;
     c6a:	3c c0       	rjmp	.+120    	; 0xce4 <leitura_sensores_ADC+0xd8>
		case 1:  // LEITURA CANAL 1 - TENSÃO BATERIA
			porcentagem_bateria = ((uint32_t)ADC*100)/1023;
     c6c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c70:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c74:	a4 e6       	ldi	r26, 0x64	; 100
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     c7c:	2f ef       	ldi	r18, 0xFF	; 255
     c7e:	33 e0       	ldi	r19, 0x03	; 3
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__udivmodsi4>
     c88:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <porcentagem_bateria+0x1>
     c8c:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <porcentagem_bateria>
			
			ADMUX = 0b01000010;        // MUDAR PARA CANAL 2
     c90:	82 e4       	ldi	r24, 0x42	; 66
     c92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			
			break;
     c96:	26 c0       	rjmp	.+76     	; 0xce4 <leitura_sensores_ADC+0xd8>
		case 2:
			temperatura_bateria = (((uint32_t)ADC - 511)*122)/100;
     c98:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c9c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ca0:	aa e7       	ldi	r26, 0x7A	; 122
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__umulhisi3>
     ca8:	66 58       	subi	r22, 0x86	; 134
     caa:	73 4f       	sbci	r23, 0xF3	; 243
     cac:	81 09       	sbc	r24, r1
     cae:	91 09       	sbc	r25, r1
     cb0:	24 e6       	ldi	r18, 0x64	; 100
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__udivmodsi4>
     cbc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <temperatura_bateria+0x1>
     cc0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <temperatura_bateria>
			
			if(temperatura_bateria > temperatura_maxima_bat)             // ATUALIZA TEMPERATURA MAXIMA DA BATERIA
     cc4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	38 f4       	brcc	.+14     	; 0xcde <leitura_sensores_ADC+0xd2>
			{
				temperatura_maxima_bat = temperatura_bateria;
     cd0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
				eeprom_update_byte((uint8_t*)5, temperatura_maxima_bat);   // ATUALIZA NA EEPROM			
     cd4:	62 2f       	mov	r22, r18
     cd6:	85 e0       	ldi	r24, 0x05	; 5
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 1a 11 	call	0x2234	; 0x2234 <eeprom_update_byte>
			}
			
			ADMUX = 0b01000000;        // MUDAR PARA CANAL 0
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			
			break;
			
	}
	cont_canal == 2 ? cont_canal = 0 : cont_canal++;                  // incrementa ou zera contador 0..2
     ce4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	19 f4       	brne	.+6      	; 0xcf2 <leitura_sensores_ADC+0xe6>
     cec:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
     cf0:	08 95       	ret
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
     cf8:	08 95       	ret

00000cfa <_100_ms>:
		instante_100us_anterior = instante_100us;
	}
}

void _100_ms(uint32_t instante_100us)           // 10hz taxa de atualização
{
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
	static uint32_t instante_100us_anterior = 0;
	
	if ((instante_100us - instante_100us_anterior) >= 1000)   
     d02:	c0 90 3d 01 	lds	r12, 0x013D	; 0x80013d <instante_100us_anterior.2599>
     d06:	d0 90 3e 01 	lds	r13, 0x013E	; 0x80013e <instante_100us_anterior.2599+0x1>
     d0a:	e0 90 3f 01 	lds	r14, 0x013F	; 0x80013f <instante_100us_anterior.2599+0x2>
     d0e:	f0 90 40 01 	lds	r15, 0x0140	; 0x800140 <instante_100us_anterior.2599+0x3>
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	2c 19       	sub	r18, r12
     d18:	3d 09       	sbc	r19, r13
     d1a:	4e 09       	sbc	r20, r14
     d1c:	5f 09       	sbc	r21, r15
     d1e:	69 01       	movw	r12, r18
     d20:	7a 01       	movw	r14, r20
     d22:	38 ee       	ldi	r19, 0xE8	; 232
     d24:	c3 16       	cp	r12, r19
     d26:	33 e0       	ldi	r19, 0x03	; 3
     d28:	d3 06       	cpc	r13, r19
     d2a:	e1 04       	cpc	r14, r1
     d2c:	f1 04       	cpc	r15, r1
     d2e:	80 f0       	brcs	.+32     	; 0xd50 <_100_ms+0x56>
     d30:	6b 01       	movw	r12, r22
     d32:	7c 01       	movw	r14, r24
	{
		// Funções executadas em 10hz
		calculosTelemetria();
     d34:	0e 94 b9 03 	call	0x772	; 0x772 <calculosTelemetria>
		leitura_sensores_ADC();                              
     d38:	0e 94 06 06 	call	0xc0c	; 0xc0c <leitura_sensores_ADC>
		envia2algarismos();
     d3c:	0e 94 4f 04 	call	0x89e	; 0x89e <envia2algarismos>
		instante_100us_anterior = instante_100us;
     d40:	c0 92 3d 01 	sts	0x013D, r12	; 0x80013d <instante_100us_anterior.2599>
     d44:	d0 92 3e 01 	sts	0x013E, r13	; 0x80013e <instante_100us_anterior.2599+0x1>
     d48:	e0 92 3f 01 	sts	0x013F, r14	; 0x80013f <instante_100us_anterior.2599+0x2>
     d4c:	f0 92 40 01 	sts	0x0140, r15	; 0x800140 <instante_100us_anterior.2599+0x3>
	}
}
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <main>:

int main(void)
{
	// Registradores de GPIO
	
	DDRB   =  0b11111110;   // Habilita saída PB1..PB7  3 X BCD + Comutador PB0 INPUT
     d5a:	8e ef       	ldi	r24, 0xFE	; 254
     d5c:	84 b9       	out	0x04, r24	; 4
	//DDRC   =  0b11011111;   // Habilita saída PC0..PC4  Display Nokia, entrada ADC PC5
	DDRD   =  0b01000010;   // PD2(SENSOR HALL), PD3(D/R), PD4(+), PD5(-), PD6(PWM), PD7(P) PD0(VIG)
     d5e:	82 e4       	ldi	r24, 0x42	; 66
     d60:	8a b9       	out	0x0a, r24	; 10
	PORTD  =  0b00110000;   // Habilita pullups PD4(+) PD5(-)  
     d62:	80 e3       	ldi	r24, 0x30	; 48
     d64:	8b b9       	out	0x0b, r24	; 11
	PORTB  =  0b00000000;   // Desabilita pullups
     d66:	15 b8       	out	0x05, r1	; 5
	DDRC  |=  0b00001000;   // PC3 SAÍDA
     d68:	87 b1       	in	r24, 0x07	; 7
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	87 b9       	out	0x07, r24	; 7
// 	TIMSK0 = 0b00000010;  // Habilita a interrupção na igualdade de comparação com 0CR0A.
 						  // A interrupção ocore a cada 100us = (8*(199+1))/16MHz
	
	// Configuração do Timer T1     | Pinos PWM 0CR1A , 0CR1B = PB1, PB2 | | Captura no PB0 ICP1 |
	
	TCCR1B = (1 << ICES1) | (1 << CS11) | (1 << CS10); // Habilita borda de subida, 010 -> Prescale 8 -> 8*(2^16)/16MHz
     d6e:	83 e4       	ldi	r24, 0x43	; 67
     d70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 1 << ICIE1;                 // Habilita a interrupção por captura
     d74:	90 e2       	ldi	r25, 0x20	; 32
     d76:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// Configuração do Timer T2     | Pinos PWM 0CR2A , 0CR2B = PB3, PD3 |

	TCCR2A = 0b00000010;  // Habilita modo CTC do TC2
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000010;  // WGM02 da ultima tabela 0, prescale (clock/8)   // NOTA, SIMULIDE NÃO FUNCIONOU SEM PRESCALE
     d80:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A  = 199;         // Ajusta o comparador para o TC2 contar até 199 -> 100u  , (8*(199+1))/16MHz
     d84:	27 ec       	ldi	r18, 0xC7	; 199
     d86:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0b00000010;  // Habilita a interrupção na igualdade de comparação com 0CR2A.
     d8a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>

	
	// Configura interrupção para borda de descida para PD2, PD3
	
	EICRA  = 0b00000010; // 1010 borda de descida em PD2, PD3   
     d8e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK  = 0b00000001; // Habilita INT1, INT0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	8d bb       	out	0x1d, r24	; 29
	PCICR  = 0b00000100; // HABILITA INTERRUPT PIN CHANGE 2 (PORTA D)
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0b10111000; // HABILITA INTERRUPT PIN CHANGE PD3 PD4 PD5 PD7
     d9c:	88 eb       	ldi	r24, 0xB8	; 184
     d9e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	// Configuração ADC  (Desativar pullup do pino que será utilizado e configurár-lo como entrada)
	
	ADMUX  =  0b01000000; // Tensão de referência canal 0
     da2:	80 e4       	ldi	r24, 0x40	; 64
     da4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA =  0b11100111; // b7 ADC Enable, b6 ADC start, b5 ADC auto trigger, b4 !Interrupt flag b3 ADC !Interrupt Enable, b0..b2 prescaler /128 para 10bits
     da8:	87 ee       	ldi	r24, 0xE7	; 231
     daa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB =  0b00000000; // Modo de conversão contínua
     dae:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0  =  0b00100000; // entradas ADC
     db2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	// Configuração do Timer T0 PWM na porta OCRA0, OCRB0
	
	TCCR0A = 0b10000011; // FAST PWM, TOP=0xFF, OC0A PD6 , PWM Não invertido 
     db6:	83 e8       	ldi	r24, 0x83	; 131
     db8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; // LIGA TC0, prescaler = 64, fpwm = foscilador/(256 * prescaler) = 976hz
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	85 bd       	out	0x25, r24	; 37
	//TCCR0A = 0b00100011; // FAST PWM NÃO INVERTIDO NO PINO 0CnB
	//TCCR0B = 0b00000100; // LIGA TC2 PRESCALER 64
	
	OCR0A  = 128;          // 50%  
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	87 bd       	out	0x27, r24	; 39
	//OCR0B  = 0;          // Conf inicial zerada  
	
	// Habilita o flag geral de interrupções
	
	sei();
     dc2:	78 94       	sei
	
	// Carregar dados da EEPROM
	
	while(!eeprom_is_ready());
     dc4:	f9 99       	sbic	0x1f, 1	; 31
     dc6:	fe cf       	rjmp	.-4      	; 0xdc4 <main+0x6a>
	diametro_cm = eeprom_read_byte((uint8_t*)0);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 0c 11 	call	0x2218	; 0x2218 <eeprom_read_byte>
     dd0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <diametro_cm>
	while(!eeprom_is_ready());
     dd4:	f9 99       	sbic	0x1f, 1	; 31
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <main+0x7a>
	distanciaPercorrida_cm = eeprom_read_float((float*)1);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 14 11 	call	0x2228	; 0x2228 <eeprom_read_dword>
     de0:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
     de4:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <distanciaPercorrida_cm>
     de8:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <distanciaPercorrida_cm+0x1>
     dec:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <distanciaPercorrida_cm+0x2>
     df0:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <distanciaPercorrida_cm+0x3>
	while(!eeprom_is_ready());
     df4:	f9 99       	sbic	0x1f, 1	; 31
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <main+0x9a>
	c_usart_recebido = (unsigned char)eeprom_read_byte((uint8_t*)5);	
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 0c 11 	call	0x2218	; 0x2218 <eeprom_read_byte>
     e00:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <c_usart_recebido>
	
	// Inicialização display Nokia
	
	//nokia_lcd_init();
	
	GLCD_Setup();
     e04:	0e 94 b5 07 	call	0xf6a	; 0xf6a <GLCD_Setup>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	48 e0       	ldi	r20, 0x08	; 8
     e0c:	65 e0       	ldi	r22, 0x05	; 5
     e0e:	88 e6       	ldi	r24, 0x68	; 104
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 2a 0a 	call	0x1454	; 0x1454 <GLCD_SetFont>
	GLCD_InvertScreen();
     e16:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GLCD_InvertScreen>
	
	// Inicialização USART
	
	USART_Init(MYUBRR);
     e1a:	87 e6       	ldi	r24, 0x67	; 103
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <USART_Init>
		
	while (1) 
    {   
		_6_ms(tempo_100us);   // atualiza 7seg BCD
     e22:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <tempo_100us>
     e26:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <tempo_100us+0x1>
     e2a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tempo_100us+0x2>
     e2e:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <tempo_100us+0x3>
     e32:	0e 94 82 04 	call	0x904	; 0x904 <_6_ms>
		_100_ms(tempo_100us); // atualiza display nokia, cálculos sem prioridade, botões, ADC 
     e36:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <tempo_100us>
     e3a:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <tempo_100us+0x1>
     e3e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tempo_100us+0x2>
     e42:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <tempo_100us+0x3>
     e46:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_100_ms>
		_500_ms(tempo_100us); // atualiza display oled
     e4a:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <tempo_100us>
     e4e:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <tempo_100us+0x1>
     e52:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <tempo_100us+0x2>
     e56:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <tempo_100us+0x3>
     e5a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_500_ms>
     e5e:	e1 cf       	rjmp	.-62     	; 0xe22 <main+0xc8>

00000e60 <GLCD_BufferWrite>:
		width += GLCD_GetWidthChar(r);
		r = pgm_read_byte(Text++);
	}
	
	return width;
}
     e60:	66 95       	lsr	r22
     e62:	66 95       	lsr	r22
     e64:	66 95       	lsr	r22
     e66:	e8 2f       	mov	r30, r24
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 e8       	ldi	r24, 0x80	; 128
     e6c:	68 9f       	mul	r22, r24
     e6e:	e0 0d       	add	r30, r0
     e70:	f1 1d       	adc	r31, r1
     e72:	11 24       	eor	r1, r1
     e74:	e8 58       	subi	r30, 0x88	; 136
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	40 83       	st	Z, r20
     e7a:	08 95       	ret

00000e7c <GLCD_BufferRead>:
     e7c:	66 95       	lsr	r22
     e7e:	66 95       	lsr	r22
     e80:	66 95       	lsr	r22
     e82:	e8 2f       	mov	r30, r24
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	68 9f       	mul	r22, r24
     e8a:	e0 0d       	add	r30, r0
     e8c:	f1 1d       	adc	r31, r1
     e8e:	11 24       	eor	r1, r1
     e90:	e8 58       	subi	r30, 0x88	; 136
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 81       	ld	r24, Z
     e96:	08 95       	ret

00000e98 <GLCD_Send>:
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	c8 2f       	mov	r28, r24
     ea2:	8b 01       	movw	r16, r22
     ea4:	d4 2f       	mov	r29, r20
     ea6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_BeginTransmission>
     eaa:	88 e7       	ldi	r24, 0x78	; 120
     eac:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_Transmit>
     eb0:	8c 2f       	mov	r24, r28
     eb2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_Transmit>
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <GLCD_Send+0x30>
     eba:	f8 01       	movw	r30, r16
     ebc:	ec 0f       	add	r30, r28
     ebe:	f1 1d       	adc	r31, r1
     ec0:	80 81       	ld	r24, Z
     ec2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_Transmit>
     ec6:	cf 5f       	subi	r28, 0xFF	; 255
     ec8:	cd 17       	cp	r28, r29
     eca:	b8 f3       	brcs	.-18     	; 0xeba <GLCD_Send+0x22>
     ecc:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_EndTransmission>
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <GLCD_SendCommand>:
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	1f 92       	push	r1
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	be 01       	movw	r22, r28
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 4c 07 	call	0xe98	; 0xe98 <GLCD_Send>
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <GLCD_Render>:
     efc:	cf 93       	push	r28
     efe:	81 e2       	ldi	r24, 0x21	; 33
     f00:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f0a:	8f e7       	ldi	r24, 0x7F	; 127
     f0c:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f10:	82 e2       	ldi	r24, 0x22	; 34
     f12:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f1c:	87 e0       	ldi	r24, 0x07	; 7
     f1e:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f22:	c0 e0       	ldi	r28, 0x00	; 0
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <GLCD_Render+0x40>
     f26:	80 e1       	ldi	r24, 0x10	; 16
     f28:	c8 9f       	mul	r28, r24
     f2a:	b0 01       	movw	r22, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	68 58       	subi	r22, 0x88	; 136
     f30:	7e 4f       	sbci	r23, 0xFE	; 254
     f32:	40 e1       	ldi	r20, 0x10	; 16
     f34:	80 e4       	ldi	r24, 0x40	; 64
     f36:	0e 94 4c 07 	call	0xe98	; 0xe98 <GLCD_Send>
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
     f3c:	c0 34       	cpi	r28, 0x40	; 64
     f3e:	98 f3       	brcs	.-26     	; 0xf26 <GLCD_Render+0x2a>
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <GLCD_GotoX>:
     f44:	88 23       	and	r24, r24
     f46:	14 f0       	brlt	.+4      	; 0xf4c <GLCD_GotoX+0x8>
     f48:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__GLCD>
     f4c:	08 95       	ret

00000f4e <GLCD_GotoY>:
     f4e:	80 34       	cpi	r24, 0x40	; 64
     f50:	10 f4       	brcc	.+4      	; 0xf56 <GLCD_GotoY+0x8>
     f52:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__GLCD+0x1>
     f56:	08 95       	ret

00000f58 <GLCD_GotoXY>:
     f58:	cf 93       	push	r28
     f5a:	c6 2f       	mov	r28, r22
     f5c:	0e 94 a2 07 	call	0xf44	; 0xf44 <GLCD_GotoX>
     f60:	8c 2f       	mov	r24, r28
     f62:	0e 94 a7 07 	call	0xf4e	; 0xf4e <GLCD_GotoY>
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <GLCD_Setup>:
     f6a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <TWI_Setup>
     f6e:	8e ea       	ldi	r24, 0xAE	; 174
     f70:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f74:	85 ed       	ldi	r24, 0xD5	; 213
     f76:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f7a:	80 ef       	ldi	r24, 0xF0	; 240
     f7c:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f80:	88 ea       	ldi	r24, 0xA8	; 168
     f82:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f86:	8f e3       	ldi	r24, 0x3F	; 63
     f88:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f8c:	83 ed       	ldi	r24, 0xD3	; 211
     f8e:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f98:	8d e8       	ldi	r24, 0x8D	; 141
     f9a:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     f9e:	84 e1       	ldi	r24, 0x14	; 20
     fa0:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fa4:	80 e4       	ldi	r24, 0x40	; 64
     fa6:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fb6:	81 ea       	ldi	r24, 0xA1	; 161
     fb8:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fc2:	8a ed       	ldi	r24, 0xDA	; 218
     fc4:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fc8:	82 e1       	ldi	r24, 0x12	; 18
     fca:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fce:	81 e8       	ldi	r24, 0x81	; 129
     fd0:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fda:	89 ed       	ldi	r24, 0xD9	; 217
     fdc:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fe0:	81 ef       	ldi	r24, 0xF1	; 241
     fe2:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fe6:	8b ed       	ldi	r24, 0xDB	; 219
     fe8:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     ff2:	84 ea       	ldi	r24, 0xA4	; 164
     ff4:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     ff8:	86 ea       	ldi	r24, 0xA6	; 166
     ffa:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
     ffe:	8e e2       	ldi	r24, 0x2E	; 46
    1000:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
    1004:	8f ea       	ldi	r24, 0xAF	; 175
    1006:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
    1012:	ef e6       	ldi	r30, 0x6F	; 111
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	86 ea       	ldi	r24, 0xA6	; 166
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	17 82       	std	Z+7, r1	; 0x07
    101c:	16 82       	std	Z+6, r1	; 0x06
    101e:	15 82       	std	Z+5, r1	; 0x05
    1020:	11 82       	std	Z+1, r1	; 0x01
    1022:	10 82       	st	Z, r1
    1024:	08 95       	ret

00001026 <GLCD_SetPixel>:
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	c6 2f       	mov	r28, r22
    1032:	14 2f       	mov	r17, r20
    1034:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
    1038:	ef e6       	ldi	r30, 0x6F	; 111
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	f1 80       	ldd	r15, Z+1	; 0x01
    103e:	d0 81       	ld	r29, Z
    1040:	6f 2d       	mov	r22, r15
    1042:	8d 2f       	mov	r24, r29
    1044:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GLCD_BufferRead>
    1048:	1f 3f       	cpi	r17, 0xFF	; 255
    104a:	79 f4       	brne	.+30     	; 0x106a <GLCD_SetPixel+0x44>
    104c:	c7 70       	andi	r28, 0x07	; 7
    104e:	01 e0       	ldi	r16, 0x01	; 1
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <GLCD_SetPixel+0x3a>
    1058:	00 0f       	add	r16, r16
    105a:	11 1f       	adc	r17, r17
    105c:	22 1f       	adc	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	ca 95       	dec	r28
    1062:	d2 f7       	brpl	.-12     	; 0x1058 <GLCD_SetPixel+0x32>
    1064:	48 2f       	mov	r20, r24
    1066:	40 2b       	or	r20, r16
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <GLCD_SetPixel+0x62>
    106a:	c7 70       	andi	r28, 0x07	; 7
    106c:	01 e0       	ldi	r16, 0x01	; 1
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	04 c0       	rjmp	.+8      	; 0x107e <GLCD_SetPixel+0x58>
    1076:	00 0f       	add	r16, r16
    1078:	11 1f       	adc	r17, r17
    107a:	22 1f       	adc	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	ca 95       	dec	r28
    1080:	d2 f7       	brpl	.-12     	; 0x1076 <GLCD_SetPixel+0x50>
    1082:	00 95       	com	r16
    1084:	40 2f       	mov	r20, r16
    1086:	48 23       	and	r20, r24
    1088:	6f 2d       	mov	r22, r15
    108a:	8d 2f       	mov	r24, r29
    108c:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	08 95       	ret

0000109c <GLCD_SetPixels>:
    109c:	6f 92       	push	r6
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	88 23       	and	r24, r24
    10ba:	0c f4       	brge	.+2      	; 0x10be <GLCD_SetPixels+0x22>
    10bc:	a7 c0       	rjmp	.+334    	; 0x120c <GLCD_SetPixels+0x170>
    10be:	44 23       	and	r20, r20
    10c0:	0c f4       	brge	.+2      	; 0x10c4 <GLCD_SetPixels+0x28>
    10c2:	a4 c0       	rjmp	.+328    	; 0x120c <GLCD_SetPixels+0x170>
    10c4:	60 34       	cpi	r22, 0x40	; 64
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <GLCD_SetPixels+0x2e>
    10c8:	a1 c0       	rjmp	.+322    	; 0x120c <GLCD_SetPixels+0x170>
    10ca:	20 34       	cpi	r18, 0x40	; 64
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <GLCD_SetPixels+0x34>
    10ce:	9e c0       	rjmp	.+316    	; 0x120c <GLCD_SetPixels+0x170>
    10d0:	26 1b       	sub	r18, r22
    10d2:	99 24       	eor	r9, r9
    10d4:	93 94       	inc	r9
    10d6:	92 0e       	add	r9, r18
    10d8:	48 1b       	sub	r20, r24
    10da:	d1 e0       	ldi	r29, 0x01	; 1
    10dc:	d4 0f       	add	r29, r20
    10de:	96 2f       	mov	r25, r22
    10e0:	97 70       	andi	r25, 0x07	; 7
    10e2:	16 2f       	mov	r17, r22
    10e4:	19 1b       	sub	r17, r25
    10e6:	e9 2c       	mov	r14, r9
    10e8:	f1 2c       	mov	r15, r1
    10ea:	28 e0       	ldi	r18, 0x08	; 8
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	29 1b       	sub	r18, r25
    10f0:	31 09       	sbc	r19, r1
    10f2:	e2 16       	cp	r14, r18
    10f4:	f3 06       	cpc	r15, r19
    10f6:	7c f4       	brge	.+30     	; 0x1116 <GLCD_SetPixels+0x7a>
    10f8:	28 e0       	ldi	r18, 0x08	; 8
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	2e 19       	sub	r18, r14
    10fe:	3f 09       	sbc	r19, r15
    1100:	4f ef       	ldi	r20, 0xFF	; 255
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	6a 01       	movw	r12, r20
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GLCD_SetPixels+0x70>
    1108:	d5 94       	asr	r13
    110a:	c7 94       	ror	r12
    110c:	2a 95       	dec	r18
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GLCD_SetPixels+0x6c>
    1110:	2c 2d       	mov	r18, r12
    1112:	b9 2c       	mov	r11, r9
    1114:	04 c0       	rjmp	.+8      	; 0x111e <GLCD_SetPixels+0x82>
    1116:	28 e0       	ldi	r18, 0x08	; 8
    1118:	b2 2e       	mov	r11, r18
    111a:	b9 1a       	sub	r11, r25
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	a8 2e       	mov	r10, r24
    1120:	c2 2e       	mov	r12, r18
    1122:	d1 2c       	mov	r13, r1
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GLCD_SetPixels+0x8e>
    1126:	cc 0c       	add	r12, r12
    1128:	dd 1c       	adc	r13, r13
    112a:	9a 95       	dec	r25
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GLCD_SetPixels+0x8a>
    112e:	6c 2c       	mov	r6, r12
    1130:	61 2f       	mov	r22, r17
    1132:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
    1136:	81 2c       	mov	r8, r1
    1138:	19 c0       	rjmp	.+50     	; 0x116c <GLCD_SetPixels+0xd0>
    113a:	ef e6       	ldi	r30, 0x6F	; 111
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	71 80       	ldd	r7, Z+1	; 0x01
    1140:	c0 81       	ld	r28, Z
    1142:	67 2d       	mov	r22, r7
    1144:	8c 2f       	mov	r24, r28
    1146:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GLCD_BufferRead>
    114a:	0f 3f       	cpi	r16, 0xFF	; 255
    114c:	19 f4       	brne	.+6      	; 0x1154 <GLCD_SetPixels+0xb8>
    114e:	46 2d       	mov	r20, r6
    1150:	48 2b       	or	r20, r24
    1152:	03 c0       	rjmp	.+6      	; 0x115a <GLCD_SetPixels+0xbe>
    1154:	4c 2d       	mov	r20, r12
    1156:	40 95       	com	r20
    1158:	48 23       	and	r20, r24
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	8c 0f       	add	r24, r28
    115e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__GLCD>
    1162:	67 2d       	mov	r22, r7
    1164:	8c 2f       	mov	r24, r28
    1166:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
    116a:	83 94       	inc	r8
    116c:	8d 16       	cp	r8, r29
    116e:	28 f3       	brcs	.-54     	; 0x113a <GLCD_SetPixels+0x9e>
    1170:	16 c0       	rjmp	.+44     	; 0x119e <GLCD_SetPixels+0x102>
    1172:	88 e0       	ldi	r24, 0x08	; 8
    1174:	b8 0e       	add	r11, r24
    1176:	18 5f       	subi	r17, 0xF8	; 248
    1178:	61 2f       	mov	r22, r17
    117a:	8a 2d       	mov	r24, r10
    117c:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
    1180:	c0 e0       	ldi	r28, 0x00	; 0
    1182:	0b c0       	rjmp	.+22     	; 0x119a <GLCD_SetPixels+0xfe>
    1184:	ef e6       	ldi	r30, 0x6F	; 111
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	61 81       	ldd	r22, Z+1	; 0x01
    118a:	80 81       	ld	r24, Z
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	98 0f       	add	r25, r24
    1190:	90 83       	st	Z, r25
    1192:	40 2f       	mov	r20, r16
    1194:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
    1198:	cf 5f       	subi	r28, 0xFF	; 255
    119a:	cd 17       	cp	r28, r29
    119c:	98 f3       	brcs	.-26     	; 0x1184 <GLCD_SetPixels+0xe8>
    119e:	8b 2d       	mov	r24, r11
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9c 01       	movw	r18, r24
    11a4:	28 5f       	subi	r18, 0xF8	; 248
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	e2 16       	cp	r14, r18
    11aa:	f3 06       	cpc	r15, r19
    11ac:	14 f7       	brge	.-60     	; 0x1172 <GLCD_SetPixels+0xd6>
    11ae:	b9 14       	cp	r11, r9
    11b0:	68 f5       	brcc	.+90     	; 0x120c <GLCD_SetPixels+0x170>
    11b2:	e8 1a       	sub	r14, r24
    11b4:	f9 0a       	sbc	r15, r25
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GLCD_SetPixels+0x124>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	ea 94       	dec	r14
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GLCD_SetPixels+0x120>
    11c4:	e8 2e       	mov	r14, r24
    11c6:	e0 94       	com	r14
    11c8:	68 e0       	ldi	r22, 0x08	; 8
    11ca:	61 0f       	add	r22, r17
    11cc:	8a 2d       	mov	r24, r10
    11ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	19 c0       	rjmp	.+50     	; 0x1208 <GLCD_SetPixels+0x16c>
    11d6:	ef e6       	ldi	r30, 0x6F	; 111
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	f1 80       	ldd	r15, Z+1	; 0x01
    11dc:	c0 81       	ld	r28, Z
    11de:	6f 2d       	mov	r22, r15
    11e0:	8c 2f       	mov	r24, r28
    11e2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GLCD_BufferRead>
    11e6:	0f 3f       	cpi	r16, 0xFF	; 255
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <GLCD_SetPixels+0x154>
    11ea:	4e 2d       	mov	r20, r14
    11ec:	48 2b       	or	r20, r24
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <GLCD_SetPixels+0x15a>
    11f0:	4e 2d       	mov	r20, r14
    11f2:	40 95       	com	r20
    11f4:	48 23       	and	r20, r24
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	8c 0f       	add	r24, r28
    11fa:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__GLCD>
    11fe:	6f 2d       	mov	r22, r15
    1200:	8c 2f       	mov	r24, r28
    1202:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
    1206:	1f 5f       	subi	r17, 0xFF	; 255
    1208:	1d 17       	cp	r17, r29
    120a:	28 f3       	brcs	.-54     	; 0x11d6 <GLCD_SetPixels+0x13a>
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	7f 90       	pop	r7
    1226:	6f 90       	pop	r6
    1228:	08 95       	ret

0000122a <GLCD_DrawLine>:
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	c8 2f       	mov	r28, r24
    1244:	d6 2f       	mov	r29, r22
    1246:	14 2f       	mov	r17, r20
    1248:	88 23       	and	r24, r24
    124a:	0c f4       	brge	.+2      	; 0x124e <GLCD_DrawLine+0x24>
    124c:	74 c0       	rjmp	.+232    	; 0x1336 <GLCD_DrawLine+0x10c>
    124e:	44 23       	and	r20, r20
    1250:	0c f4       	brge	.+2      	; 0x1254 <GLCD_DrawLine+0x2a>
    1252:	71 c0       	rjmp	.+226    	; 0x1336 <GLCD_DrawLine+0x10c>
    1254:	60 34       	cpi	r22, 0x40	; 64
    1256:	08 f0       	brcs	.+2      	; 0x125a <GLCD_DrawLine+0x30>
    1258:	6e c0       	rjmp	.+220    	; 0x1336 <GLCD_DrawLine+0x10c>
    125a:	20 34       	cpi	r18, 0x40	; 64
    125c:	08 f0       	brcs	.+2      	; 0x1260 <GLCD_DrawLine+0x36>
    125e:	6b c0       	rjmp	.+214    	; 0x1336 <GLCD_DrawLine+0x10c>
    1260:	84 13       	cpse	r24, r20
    1262:	0a c0       	rjmp	.+20     	; 0x1278 <GLCD_DrawLine+0x4e>
    1264:	26 17       	cp	r18, r22
    1266:	10 f4       	brcc	.+4      	; 0x126c <GLCD_DrawLine+0x42>
    1268:	d2 2f       	mov	r29, r18
    126a:	26 2f       	mov	r18, r22
    126c:	4c 2f       	mov	r20, r28
    126e:	6d 2f       	mov	r22, r29
    1270:	8c 2f       	mov	r24, r28
    1272:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_SetPixels>
    1276:	5f c0       	rjmp	.+190    	; 0x1336 <GLCD_DrawLine+0x10c>
    1278:	62 13       	cpse	r22, r18
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <GLCD_DrawLine+0x6e>
    127c:	48 17       	cp	r20, r24
    127e:	48 f4       	brcc	.+18     	; 0x1292 <GLCD_DrawLine+0x68>
    1280:	c4 2f       	mov	r28, r20
    1282:	18 2f       	mov	r17, r24
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <GLCD_DrawLine+0x68>
    1286:	40 2f       	mov	r20, r16
    1288:	6d 2f       	mov	r22, r29
    128a:	8c 2f       	mov	r24, r28
    128c:	0e 94 13 08 	call	0x1026	; 0x1026 <GLCD_SetPixel>
    1290:	cf 5f       	subi	r28, 0xFF	; 255
    1292:	1c 17       	cp	r17, r28
    1294:	c0 f7       	brcc	.-16     	; 0x1286 <GLCD_DrawLine+0x5c>
    1296:	4f c0       	rjmp	.+158    	; 0x1336 <GLCD_DrawLine+0x10c>
    1298:	26 17       	cp	r18, r22
    129a:	28 f4       	brcc	.+10     	; 0x12a6 <GLCD_DrawLine+0x7c>
    129c:	c6 2e       	mov	r12, r22
    129e:	d1 2c       	mov	r13, r1
    12a0:	c2 1a       	sub	r12, r18
    12a2:	d1 08       	sbc	r13, r1
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <GLCD_DrawLine+0x84>
    12a6:	c2 2e       	mov	r12, r18
    12a8:	d1 2c       	mov	r13, r1
    12aa:	c6 1a       	sub	r12, r22
    12ac:	d1 08       	sbc	r13, r1
    12ae:	1c 17       	cp	r17, r28
    12b0:	28 f4       	brcc	.+10     	; 0x12bc <GLCD_DrawLine+0x92>
    12b2:	ac 2e       	mov	r10, r28
    12b4:	b1 2c       	mov	r11, r1
    12b6:	a1 1a       	sub	r10, r17
    12b8:	b1 08       	sbc	r11, r1
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <GLCD_DrawLine+0x9a>
    12bc:	a1 2e       	mov	r10, r17
    12be:	b1 2c       	mov	r11, r1
    12c0:	ac 1a       	sub	r10, r28
    12c2:	b1 08       	sbc	r11, r1
    12c4:	ac 14       	cp	r10, r12
    12c6:	bd 04       	cpc	r11, r13
    12c8:	34 f4       	brge	.+12     	; 0x12d6 <GLCD_DrawLine+0xac>
    12ca:	81 2f       	mov	r24, r17
    12cc:	12 2f       	mov	r17, r18
    12ce:	28 2f       	mov	r18, r24
    12d0:	8c 2f       	mov	r24, r28
    12d2:	cd 2f       	mov	r28, r29
    12d4:	d8 2f       	mov	r29, r24
    12d6:	1c 17       	cp	r17, r28
    12d8:	30 f4       	brcc	.+12     	; 0x12e6 <GLCD_DrawLine+0xbc>
    12da:	8d 2f       	mov	r24, r29
    12dc:	d2 2f       	mov	r29, r18
    12de:	28 2f       	mov	r18, r24
    12e0:	8c 2f       	mov	r24, r28
    12e2:	c1 2f       	mov	r28, r17
    12e4:	18 2f       	mov	r17, r24
    12e6:	91 2e       	mov	r9, r17
    12e8:	9c 1a       	sub	r9, r28
    12ea:	d2 17       	cp	r29, r18
    12ec:	18 f4       	brcc	.+6      	; 0x12f4 <GLCD_DrawLine+0xca>
    12ee:	e2 2e       	mov	r14, r18
    12f0:	ed 1a       	sub	r14, r29
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GLCD_DrawLine+0xce>
    12f4:	ed 2e       	mov	r14, r29
    12f6:	e2 1a       	sub	r14, r18
    12f8:	f9 2c       	mov	r15, r9
    12fa:	f6 94       	lsr	r15
    12fc:	d2 17       	cp	r29, r18
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <GLCD_DrawLine+0xdc>
    1300:	88 24       	eor	r8, r8
    1302:	83 94       	inc	r8
    1304:	16 c0       	rjmp	.+44     	; 0x1332 <GLCD_DrawLine+0x108>
    1306:	88 24       	eor	r8, r8
    1308:	8a 94       	dec	r8
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <GLCD_DrawLine+0x108>
    130c:	ac 14       	cp	r10, r12
    130e:	bd 04       	cpc	r11, r13
    1310:	34 f4       	brge	.+12     	; 0x131e <GLCD_DrawLine+0xf4>
    1312:	40 2f       	mov	r20, r16
    1314:	6c 2f       	mov	r22, r28
    1316:	8d 2f       	mov	r24, r29
    1318:	0e 94 13 08 	call	0x1026	; 0x1026 <GLCD_SetPixel>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <GLCD_DrawLine+0xfe>
    131e:	40 2f       	mov	r20, r16
    1320:	6d 2f       	mov	r22, r29
    1322:	8c 2f       	mov	r24, r28
    1324:	0e 94 13 08 	call	0x1026	; 0x1026 <GLCD_SetPixel>
    1328:	fe 18       	sub	r15, r14
    132a:	12 f4       	brpl	.+4      	; 0x1330 <GLCD_DrawLine+0x106>
    132c:	d8 0d       	add	r29, r8
    132e:	f9 0c       	add	r15, r9
    1330:	cf 5f       	subi	r28, 0xFF	; 255
    1332:	1c 17       	cp	r17, r28
    1334:	58 f7       	brcc	.-42     	; 0x130c <GLCD_DrawLine+0xe2>
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	bf 90       	pop	r11
    1348:	af 90       	pop	r10
    134a:	9f 90       	pop	r9
    134c:	8f 90       	pop	r8
    134e:	08 95       	ret

00001350 <GLCD_DrawRectangle>:
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	88 23       	and	r24, r24
    1360:	0c f4       	brge	.+2      	; 0x1364 <GLCD_DrawRectangle+0x14>
    1362:	45 c0       	rjmp	.+138    	; 0x13ee <GLCD_DrawRectangle+0x9e>
    1364:	44 23       	and	r20, r20
    1366:	0c f4       	brge	.+2      	; 0x136a <GLCD_DrawRectangle+0x1a>
    1368:	42 c0       	rjmp	.+132    	; 0x13ee <GLCD_DrawRectangle+0x9e>
    136a:	60 34       	cpi	r22, 0x40	; 64
    136c:	08 f0       	brcs	.+2      	; 0x1370 <GLCD_DrawRectangle+0x20>
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <GLCD_DrawRectangle+0x9e>
    1370:	20 34       	cpi	r18, 0x40	; 64
    1372:	e8 f5       	brcc	.+122    	; 0x13ee <GLCD_DrawRectangle+0x9e>
    1374:	d0 2f       	mov	r29, r16
    1376:	12 2f       	mov	r17, r18
    1378:	d4 2e       	mov	r13, r20
    137a:	f6 2e       	mov	r15, r22
    137c:	e8 2e       	mov	r14, r24
    137e:	48 17       	cp	r20, r24
    1380:	18 f0       	brcs	.+6      	; 0x1388 <GLCD_DrawRectangle+0x38>
    1382:	04 2f       	mov	r16, r20
    1384:	c8 2f       	mov	r28, r24
    1386:	09 c0       	rjmp	.+18     	; 0x139a <GLCD_DrawRectangle+0x4a>
    1388:	08 2f       	mov	r16, r24
    138a:	c4 2f       	mov	r28, r20
    138c:	06 c0       	rjmp	.+12     	; 0x139a <GLCD_DrawRectangle+0x4a>
    138e:	4d 2f       	mov	r20, r29
    1390:	6f 2d       	mov	r22, r15
    1392:	8c 2f       	mov	r24, r28
    1394:	0e 94 13 08 	call	0x1026	; 0x1026 <GLCD_SetPixel>
    1398:	cf 5f       	subi	r28, 0xFF	; 255
    139a:	0c 17       	cp	r16, r28
    139c:	c0 f7       	brcc	.-16     	; 0x138e <GLCD_DrawRectangle+0x3e>
    139e:	de 14       	cp	r13, r14
    13a0:	18 f0       	brcs	.+6      	; 0x13a8 <GLCD_DrawRectangle+0x58>
    13a2:	0d 2d       	mov	r16, r13
    13a4:	ce 2d       	mov	r28, r14
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <GLCD_DrawRectangle+0x6a>
    13a8:	0e 2d       	mov	r16, r14
    13aa:	cd 2d       	mov	r28, r13
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <GLCD_DrawRectangle+0x6a>
    13ae:	4d 2f       	mov	r20, r29
    13b0:	61 2f       	mov	r22, r17
    13b2:	8c 2f       	mov	r24, r28
    13b4:	0e 94 13 08 	call	0x1026	; 0x1026 <GLCD_SetPixel>
    13b8:	cf 5f       	subi	r28, 0xFF	; 255
    13ba:	0c 17       	cp	r16, r28
    13bc:	c0 f7       	brcc	.-16     	; 0x13ae <GLCD_DrawRectangle+0x5e>
    13be:	1f 15       	cp	r17, r15
    13c0:	18 f0       	brcs	.+6      	; 0x13c8 <GLCD_DrawRectangle+0x78>
    13c2:	21 2f       	mov	r18, r17
    13c4:	6f 2d       	mov	r22, r15
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GLCD_DrawRectangle+0x7c>
    13c8:	2f 2d       	mov	r18, r15
    13ca:	61 2f       	mov	r22, r17
    13cc:	0d 2f       	mov	r16, r29
    13ce:	4e 2d       	mov	r20, r14
    13d0:	8e 2d       	mov	r24, r14
    13d2:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_SetPixels>
    13d6:	1f 15       	cp	r17, r15
    13d8:	18 f0       	brcs	.+6      	; 0x13e0 <GLCD_DrawRectangle+0x90>
    13da:	21 2f       	mov	r18, r17
    13dc:	6f 2d       	mov	r22, r15
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GLCD_DrawRectangle+0x94>
    13e0:	2f 2d       	mov	r18, r15
    13e2:	61 2f       	mov	r22, r17
    13e4:	0d 2f       	mov	r16, r29
    13e6:	4d 2d       	mov	r20, r13
    13e8:	8d 2d       	mov	r24, r13
    13ea:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_SetPixels>
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	08 95       	ret

000013fe <GLCD_FillScreen>:
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	18 2f       	mov	r17, r24
    1406:	d0 e0       	ldi	r29, 0x00	; 0
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <GLCD_FillScreen+0x22>
    140a:	41 2f       	mov	r20, r17
    140c:	6d 2f       	mov	r22, r29
    140e:	8c 2f       	mov	r24, r28
    1410:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
    1414:	cf 5f       	subi	r28, 0xFF	; 255
    1416:	01 c0       	rjmp	.+2      	; 0x141a <GLCD_FillScreen+0x1c>
    1418:	c0 e0       	ldi	r28, 0x00	; 0
    141a:	cc 23       	and	r28, r28
    141c:	b4 f7       	brge	.-20     	; 0x140a <GLCD_FillScreen+0xc>
    141e:	d8 5f       	subi	r29, 0xF8	; 248
    1420:	d0 34       	cpi	r29, 0x40	; 64
    1422:	d0 f3       	brcs	.-12     	; 0x1418 <GLCD_FillScreen+0x1a>
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	08 95       	ret

0000142c <GLCD_Clear>:
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <GLCD_FillScreen>
    1432:	08 95       	ret

00001434 <GLCD_InvertScreen>:
    1434:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <__GLCD+0x2>
    1438:	87 3a       	cpi	r24, 0xA7	; 167
    143a:	21 f4       	brne	.+8      	; 0x1444 <GLCD_InvertScreen+0x10>
    143c:	86 ea       	ldi	r24, 0xA6	; 166
    143e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__GLCD+0x2>
    1442:	03 c0       	rjmp	.+6      	; 0x144a <GLCD_InvertScreen+0x16>
    1444:	87 ea       	ldi	r24, 0xA7	; 167
    1446:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__GLCD+0x2>
    144a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <__GLCD+0x2>
    144e:	0e 94 6d 07 	call	0xeda	; 0xeda <GLCD_SendCommand>
    1452:	08 95       	ret

00001454 <GLCD_SetFont>:
    1454:	66 23       	and	r22, r22
    1456:	e4 f0       	brlt	.+56     	; 0x1490 <GLCD_SetFont+0x3c>
    1458:	40 34       	cpi	r20, 0x40	; 64
    145a:	d0 f4       	brcc	.+52     	; 0x1490 <GLCD_SetFont+0x3c>
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	c0 f4       	brcc	.+48     	; 0x1490 <GLCD_SetFont+0x3c>
    1460:	ef e6       	ldi	r30, 0x6F	; 111
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	94 83       	std	Z+4, r25	; 0x04
    1466:	83 83       	std	Z+3, r24	; 0x03
    1468:	65 83       	std	Z+5, r22	; 0x05
    146a:	46 83       	std	Z+6, r20	; 0x06
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	41 50       	subi	r20, 0x01	; 1
    1470:	51 09       	sbc	r21, r1
    1472:	ca 01       	movw	r24, r20
    1474:	99 23       	and	r25, r25
    1476:	0c f4       	brge	.+2      	; 0x147a <GLCD_SetFont+0x26>
    1478:	07 96       	adiw	r24, 0x07	; 7
    147a:	95 95       	asr	r25
    147c:	87 95       	ror	r24
    147e:	95 95       	asr	r25
    1480:	87 95       	ror	r24
    1482:	95 95       	asr	r25
    1484:	87 95       	ror	r24
    1486:	ef e6       	ldi	r30, 0x6F	; 111
    1488:	f1 e0       	ldi	r31, 0x01	; 1
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	87 83       	std	Z+7, r24	; 0x07
    148e:	20 87       	std	Z+8, r18	; 0x08
    1490:	08 95       	ret

00001492 <GLCD_PrintChar>:

void GLCD_PrintChar(char Character)
{
    1492:	4f 92       	push	r4
    1494:	5f 92       	push	r5
    1496:	6f 92       	push	r6
    1498:	7f 92       	push	r7
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    14b2:	af e6       	ldi	r26, 0x6F	; 111
    14b4:	b1 e0       	ldi	r27, 0x01	; 1
    14b6:	5c 90       	ld	r5, X
	y = y2 = __GLCD.Y;
    14b8:	11 96       	adiw	r26, 0x01	; 1
    14ba:	4c 90       	ld	r4, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    14be:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    14c0:	15 96       	adiw	r26, 0x05	; 5
    14c2:	9c 91       	ld	r25, X
    14c4:	15 97       	sbiw	r26, 0x05	; 5
    14c6:	17 96       	adiw	r26, 0x07	; 7
    14c8:	2c 91       	ld	r18, X
    14ca:	17 97       	sbiw	r26, 0x07	; 7
    14cc:	92 9f       	mul	r25, r18
    14ce:	90 01       	movw	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	82 9f       	mul	r24, r18
    14d8:	a0 01       	movw	r20, r0
    14da:	83 9f       	mul	r24, r19
    14dc:	50 0d       	add	r21, r0
    14de:	11 24       	eor	r1, r1
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    14e0:	13 96       	adiw	r26, 0x03	; 3
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	14 97       	sbiw	r26, 0x04	; 4
    14e8:	5a 01       	movw	r10, r20
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	a8 1a       	sub	r10, r24
    14ee:	b8 0a       	sbc	r11, r24
    14f0:	e4 0f       	add	r30, r20
    14f2:	f5 1f       	adc	r31, r21
    14f4:	74 90       	lpm	r7, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    14f6:	84 2d       	mov	r24, r4
    14f8:	87 70       	andi	r24, 0x07	; 7
    14fa:	98 2e       	mov	r9, r24
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    14fc:	64 2c       	mov	r6, r4
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    14fe:	81 2c       	mov	r8, r1
    1500:	5f c0       	rjmp	.+190    	; 0x15c0 <GLCD_PrintChar+0x12e>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    1502:	66 2d       	mov	r22, r6
    1504:	85 2d       	mov	r24, r5
    1506:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    150a:	75 01       	movw	r14, r10
    150c:	e8 0c       	add	r14, r8
    150e:	f1 1c       	adc	r15, r1
		fontReadPrev = fontRead - 1;
    1510:	67 01       	movw	r12, r14
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	c8 1a       	sub	r12, r24
    1516:	d1 08       	sbc	r13, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	41 c0       	rjmp	.+130    	; 0x159e <GLCD_PrintChar+0x10c>
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    151c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__GLCD+0x3>
    1520:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__GLCD+0x4>
    1524:	fc 01       	movw	r30, r24
    1526:	ee 0d       	add	r30, r14
    1528:	ff 1d       	adc	r31, r15
    152a:	24 91       	lpm	r18, Z
			
			//Shift byte
			data <<= overflow;
    152c:	49 2d       	mov	r20, r9
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	09 2c       	mov	r0, r9
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GLCD_PrintChar+0xa8>
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <GLCD_PrintChar+0xa4>
    153e:	02 2f       	mov	r16, r18
			
			//Merge byte with previous one
			if (j > 0)
    1540:	88 20       	and	r8, r8
    1542:	a1 f0       	breq	.+40     	; 0x156c <GLCD_PrintChar+0xda>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    1544:	fc 01       	movw	r30, r24
    1546:	ec 0d       	add	r30, r12
    1548:	fd 1d       	adc	r31, r13
    154a:	e4 91       	lpm	r30, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    154c:	88 e0       	ldi	r24, 0x08	; 8
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	84 1b       	sub	r24, r20
    1552:	95 0b       	sbc	r25, r21
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GLCD_PrintChar+0xca>
    1558:	f5 95       	asr	r31
    155a:	e7 95       	ror	r30
    155c:	8a 95       	dec	r24
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GLCD_PrintChar+0xc6>
				data |= dataPrev;
    1560:	0e 2f       	mov	r16, r30
    1562:	02 2b       	or	r16, r18
				fontReadPrev += __GLCD.Font.Lines;
    1564:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__GLCD+0x7>
    1568:	c8 0e       	add	r12, r24
    156a:	d1 1c       	adc	r13, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    156c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <__GLCD+0x8>
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	39 f4       	brne	.+14     	; 0x1582 <GLCD_PrintChar+0xf0>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    1574:	ef e6       	ldi	r30, 0x6F	; 111
    1576:	f1 e0       	ldi	r31, 0x01	; 1
    1578:	61 81       	ldd	r22, Z+1	; 0x01
    157a:	80 81       	ld	r24, Z
    157c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GLCD_BufferRead>
    1580:	08 2b       	or	r16, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    1582:	cf e6       	ldi	r28, 0x6F	; 111
    1584:	d1 e0       	ldi	r29, 0x01	; 1
    1586:	69 81       	ldd	r22, Y+1	; 0x01
    1588:	88 81       	ld	r24, Y
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	98 0f       	add	r25, r24
    158e:	98 83       	st	Y, r25
    1590:	40 2f       	mov	r20, r16
    1592:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	e8 0e       	add	r14, r24
    159a:	f1 1c       	adc	r15, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    159c:	1f 5f       	subi	r17, 0xFF	; 255
    159e:	17 15       	cp	r17, r7
    15a0:	08 f4       	brcc	.+2      	; 0x15a4 <GLCD_PrintChar+0x112>
    15a2:	bc cf       	rjmp	.-136    	; 0x151c <GLCD_PrintChar+0x8a>
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    15a4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <__GLCD+0x8>
    15a8:	81 11       	cpse	r24, r1
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <GLCD_PrintChar+0x128>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    15ac:	ef e6       	ldi	r30, 0x6F	; 111
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	61 81       	ldd	r22, Z+1	; 0x01
    15b4:	80 81       	ld	r24, Z
    15b6:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    15ba:	88 e0       	ldi	r24, 0x08	; 8
    15bc:	68 0e       	add	r6, r24
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    15be:	83 94       	inc	r8
    15c0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__GLCD+0x7>
    15c4:	88 16       	cp	r8, r24
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <GLCD_PrintChar+0x138>
    15c8:	9c cf       	rjmp	.-200    	; 0x1502 <GLCD_PrintChar+0x70>
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_GetLine(y2) != __GLCD_GetLine((y2 + __GLCD.Font.Height - 1)) && y < __GLCD_Screen_Height)
    15ca:	24 2d       	mov	r18, r4
    15cc:	26 95       	lsr	r18
    15ce:	26 95       	lsr	r18
    15d0:	26 95       	lsr	r18
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <__GLCD+0x6>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	84 0d       	add	r24, r4
    15dc:	91 1d       	adc	r25, r1
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	ac 01       	movw	r20, r24
    15e2:	12 f4       	brpl	.+4      	; 0x15e8 <GLCD_PrintChar+0x156>
    15e4:	49 5f       	subi	r20, 0xF9	; 249
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	55 95       	asr	r21
    15ee:	47 95       	ror	r20
    15f0:	55 95       	asr	r21
    15f2:	47 95       	ror	r20
    15f4:	24 17       	cp	r18, r20
    15f6:	35 07       	cpc	r19, r21
    15f8:	09 f4       	brne	.+2      	; 0x15fc <GLCD_PrintChar+0x16a>
    15fa:	45 c0       	rjmp	.+138    	; 0x1686 <GLCD_PrintChar+0x1f4>
    15fc:	8f e3       	ldi	r24, 0x3F	; 63
    15fe:	86 15       	cp	r24, r6
    1600:	08 f4       	brcc	.+2      	; 0x1604 <GLCD_PrintChar+0x172>
    1602:	41 c0       	rjmp	.+130    	; 0x1686 <GLCD_PrintChar+0x1f4>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    1604:	66 2d       	mov	r22, r6
    1606:	85 2d       	mov	r24, r5
    1608:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    160c:	a8 0c       	add	r10, r8
    160e:	b1 1c       	adc	r11, r1
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	a8 1a       	sub	r10, r24
    1614:	b1 08       	sbc	r11, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	29 c0       	rjmp	.+82     	; 0x166c <GLCD_PrintChar+0x1da>
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    161a:	cf e6       	ldi	r28, 0x6F	; 111
    161c:	d1 e0       	ldi	r29, 0x01	; 1
    161e:	f9 80       	ldd	r15, Y+1	; 0x01
    1620:	18 81       	ld	r17, Y
    1622:	6f 2d       	mov	r22, r15
    1624:	81 2f       	mov	r24, r17
    1626:	0e 94 3e 07 	call	0xe7c	; 0xe7c <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    162a:	eb 81       	ldd	r30, Y+3	; 0x03
    162c:	fc 81       	ldd	r31, Y+4	; 0x04
    162e:	ea 0d       	add	r30, r10
    1630:	fb 1d       	adc	r31, r11
    1632:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    1634:	28 e0       	ldi	r18, 0x08	; 8
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	29 19       	sub	r18, r9
    163a:	31 09       	sbc	r19, r1
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GLCD_PrintChar+0x1b2>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	2a 95       	dec	r18
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GLCD_PrintChar+0x1ae>
			data |= dataPrev;
    1648:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	91 30       	cpi	r25, 0x01	; 1
    164e:	09 f4       	brne	.+2      	; 0x1652 <GLCD_PrintChar+0x1c0>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    1650:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    1652:	cf e6       	ldi	r28, 0x6F	; 111
    1654:	d1 e0       	ldi	r29, 0x01	; 1
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	81 0f       	add	r24, r17
    165a:	88 83       	st	Y, r24
    165c:	6f 2d       	mov	r22, r15
    165e:	81 2f       	mov	r24, r17
    1660:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	a8 0e       	add	r10, r24
    1668:	b1 1c       	adc	r11, r1
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    166a:	0f 5f       	subi	r16, 0xFF	; 255
    166c:	07 15       	cp	r16, r7
    166e:	a8 f2       	brcs	.-86     	; 0x161a <GLCD_PrintChar+0x188>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    1670:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <__GLCD+0x8>
    1674:	81 11       	cpse	r24, r1
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <GLCD_PrintChar+0x1f4>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    1678:	ef e6       	ldi	r30, 0x6F	; 111
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	61 81       	ldd	r22, Z+1	; 0x01
    1680:	80 81       	ld	r24, Z
    1682:	0e 94 30 07 	call	0xe60	; 0xe60 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    1686:	85 2d       	mov	r24, r5
    1688:	87 0d       	add	r24, r7
    168a:	64 2d       	mov	r22, r4
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	0e 94 ac 07 	call	0xf58	; 0xf58 <GLCD_GotoXY>
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	9f 90       	pop	r9
    16a8:	8f 90       	pop	r8
    16aa:	7f 90       	pop	r7
    16ac:	6f 90       	pop	r6
    16ae:	5f 90       	pop	r5
    16b0:	4f 90       	pop	r4
    16b2:	08 95       	ret

000016b4 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
	while(*Text)
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <GLCD_PrintString+0x22>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    16bc:	ef e6       	ldi	r30, 0x6F	; 111
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	90 81       	ld	r25, Z
    16c2:	25 81       	ldd	r18, Z+5	; 0x05
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	29 0f       	add	r18, r25
    16c8:	31 1d       	adc	r19, r1
    16ca:	20 38       	cpi	r18, 0x80	; 128
    16cc:	31 05       	cpc	r19, r1
    16ce:	34 f4       	brge	.+12     	; 0x16dc <GLCD_PrintString+0x28>
			break;

		GLCD_PrintChar(*Text++);
    16d0:	21 96       	adiw	r28, 0x01	; 1
    16d2:	0e 94 49 0a 	call	0x1492	; 0x1492 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    16d6:	88 81       	ld	r24, Y
    16d8:	81 11       	cpse	r24, r1
    16da:	f0 cf       	rjmp	.-32     	; 0x16bc <GLCD_PrintString+0x8>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    16e2:	87 b1       	in	r24, 0x07	; 7
    16e4:	80 61       	ori	r24, 0x10	; 16
    16e6:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    16e8:	87 b1       	in	r24, 0x07	; 7
    16ea:	80 62       	ori	r24, 0x20	; 32
    16ec:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    16ee:	88 b1       	in	r24, 0x08	; 8
    16f0:	80 61       	ori	r24, 0x10	; 16
    16f2:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    16f4:	88 b1       	in	r24, 0x08	; 8
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    16fa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    16fe:	88 e4       	ldi	r24, 0x48	; 72
    1700:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    170a:	08 95       	ret

0000170c <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    170c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    1710:	88 7f       	andi	r24, 0xF8	; 248
    1712:	08 95       	ret

00001714 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1714:	84 ea       	ldi	r24, 0xA4	; 164
    1716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    171a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    171e:	88 23       	and	r24, r24
    1720:	e4 f7       	brge	.-8      	; 0x171a <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    1722:	0e 94 86 0b 	call	0x170c	; 0x170c <TWI_Status>
}
    1726:	08 95       	ret

00001728 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1728:	85 ed       	ldi	r24, 0xD5	; 213
    172a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    172e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1732:	84 fd       	sbrc	r24, 4
    1734:	fc cf       	rjmp	.-8      	; 0x172e <TWI_EndTransmission+0x6>
}
    1736:	08 95       	ret

00001738 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    1738:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    173c:	84 e8       	ldi	r24, 0x84	; 132
    173e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    1742:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1746:	88 23       	and	r24, r24
    1748:	e4 f7       	brge	.-8      	; 0x1742 <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    174a:	0e 94 86 0b 	call	0x170c	; 0x170c <TWI_Status>
}
    174e:	08 95       	ret

00001750 <__subsf3>:
    1750:	50 58       	subi	r21, 0x80	; 128

00001752 <__addsf3>:
    1752:	bb 27       	eor	r27, r27
    1754:	aa 27       	eor	r26, r26
    1756:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__addsf3x>
    175a:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__fp_round>
    175e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_pscA>
    1762:	38 f0       	brcs	.+14     	; 0x1772 <__addsf3+0x20>
    1764:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscB>
    1768:	20 f0       	brcs	.+8      	; 0x1772 <__addsf3+0x20>
    176a:	39 f4       	brne	.+14     	; 0x177a <__addsf3+0x28>
    176c:	9f 3f       	cpi	r25, 0xFF	; 255
    176e:	19 f4       	brne	.+6      	; 0x1776 <__addsf3+0x24>
    1770:	26 f4       	brtc	.+8      	; 0x177a <__addsf3+0x28>
    1772:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_nan>
    1776:	0e f4       	brtc	.+2      	; 0x177a <__addsf3+0x28>
    1778:	e0 95       	com	r30
    177a:	e7 fb       	bst	r30, 7
    177c:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_inf>

00001780 <__addsf3x>:
    1780:	e9 2f       	mov	r30, r25
    1782:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_split3>
    1786:	58 f3       	brcs	.-42     	; 0x175e <__addsf3+0xc>
    1788:	ba 17       	cp	r27, r26
    178a:	62 07       	cpc	r22, r18
    178c:	73 07       	cpc	r23, r19
    178e:	84 07       	cpc	r24, r20
    1790:	95 07       	cpc	r25, r21
    1792:	20 f0       	brcs	.+8      	; 0x179c <__addsf3x+0x1c>
    1794:	79 f4       	brne	.+30     	; 0x17b4 <__addsf3x+0x34>
    1796:	a6 f5       	brtc	.+104    	; 0x1800 <__addsf3x+0x80>
    1798:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_zero>
    179c:	0e f4       	brtc	.+2      	; 0x17a0 <__addsf3x+0x20>
    179e:	e0 95       	com	r30
    17a0:	0b 2e       	mov	r0, r27
    17a2:	ba 2f       	mov	r27, r26
    17a4:	a0 2d       	mov	r26, r0
    17a6:	0b 01       	movw	r0, r22
    17a8:	b9 01       	movw	r22, r18
    17aa:	90 01       	movw	r18, r0
    17ac:	0c 01       	movw	r0, r24
    17ae:	ca 01       	movw	r24, r20
    17b0:	a0 01       	movw	r20, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	ff 27       	eor	r31, r31
    17b6:	59 1b       	sub	r21, r25
    17b8:	99 f0       	breq	.+38     	; 0x17e0 <__addsf3x+0x60>
    17ba:	59 3f       	cpi	r21, 0xF9	; 249
    17bc:	50 f4       	brcc	.+20     	; 0x17d2 <__addsf3x+0x52>
    17be:	50 3e       	cpi	r21, 0xE0	; 224
    17c0:	68 f1       	brcs	.+90     	; 0x181c <__addsf3x+0x9c>
    17c2:	1a 16       	cp	r1, r26
    17c4:	f0 40       	sbci	r31, 0x00	; 0
    17c6:	a2 2f       	mov	r26, r18
    17c8:	23 2f       	mov	r18, r19
    17ca:	34 2f       	mov	r19, r20
    17cc:	44 27       	eor	r20, r20
    17ce:	58 5f       	subi	r21, 0xF8	; 248
    17d0:	f3 cf       	rjmp	.-26     	; 0x17b8 <__addsf3x+0x38>
    17d2:	46 95       	lsr	r20
    17d4:	37 95       	ror	r19
    17d6:	27 95       	ror	r18
    17d8:	a7 95       	ror	r26
    17da:	f0 40       	sbci	r31, 0x00	; 0
    17dc:	53 95       	inc	r21
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <__addsf3x+0x52>
    17e0:	7e f4       	brtc	.+30     	; 0x1800 <__addsf3x+0x80>
    17e2:	1f 16       	cp	r1, r31
    17e4:	ba 0b       	sbc	r27, r26
    17e6:	62 0b       	sbc	r22, r18
    17e8:	73 0b       	sbc	r23, r19
    17ea:	84 0b       	sbc	r24, r20
    17ec:	ba f0       	brmi	.+46     	; 0x181c <__addsf3x+0x9c>
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	a1 f0       	breq	.+40     	; 0x181a <__addsf3x+0x9a>
    17f2:	ff 0f       	add	r31, r31
    17f4:	bb 1f       	adc	r27, r27
    17f6:	66 1f       	adc	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	c2 f7       	brpl	.-16     	; 0x17ee <__addsf3x+0x6e>
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <__addsf3x+0x9c>
    1800:	ba 0f       	add	r27, r26
    1802:	62 1f       	adc	r22, r18
    1804:	73 1f       	adc	r23, r19
    1806:	84 1f       	adc	r24, r20
    1808:	48 f4       	brcc	.+18     	; 0x181c <__addsf3x+0x9c>
    180a:	87 95       	ror	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9e 3f       	cpi	r25, 0xFE	; 254
    1816:	08 f0       	brcs	.+2      	; 0x181a <__addsf3x+0x9a>
    1818:	b0 cf       	rjmp	.-160    	; 0x177a <__addsf3+0x28>
    181a:	93 95       	inc	r25
    181c:	88 0f       	add	r24, r24
    181e:	08 f0       	brcs	.+2      	; 0x1822 <__addsf3x+0xa2>
    1820:	99 27       	eor	r25, r25
    1822:	ee 0f       	add	r30, r30
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	08 95       	ret

0000182a <__divsf3>:
    182a:	0e 94 29 0c 	call	0x1852	; 0x1852 <__divsf3x>
    182e:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__fp_round>
    1832:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscB>
    1836:	58 f0       	brcs	.+22     	; 0x184e <__divsf3+0x24>
    1838:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_pscA>
    183c:	40 f0       	brcs	.+16     	; 0x184e <__divsf3+0x24>
    183e:	29 f4       	brne	.+10     	; 0x184a <__divsf3+0x20>
    1840:	5f 3f       	cpi	r21, 0xFF	; 255
    1842:	29 f0       	breq	.+10     	; 0x184e <__divsf3+0x24>
    1844:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_inf>
    1848:	51 11       	cpse	r21, r1
    184a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_szero>
    184e:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_nan>

00001852 <__divsf3x>:
    1852:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_split3>
    1856:	68 f3       	brcs	.-38     	; 0x1832 <__divsf3+0x8>

00001858 <__divsf3_pse>:
    1858:	99 23       	and	r25, r25
    185a:	b1 f3       	breq	.-20     	; 0x1848 <__divsf3+0x1e>
    185c:	55 23       	and	r21, r21
    185e:	91 f3       	breq	.-28     	; 0x1844 <__divsf3+0x1a>
    1860:	95 1b       	sub	r25, r21
    1862:	55 0b       	sbc	r21, r21
    1864:	bb 27       	eor	r27, r27
    1866:	aa 27       	eor	r26, r26
    1868:	62 17       	cp	r22, r18
    186a:	73 07       	cpc	r23, r19
    186c:	84 07       	cpc	r24, r20
    186e:	38 f0       	brcs	.+14     	; 0x187e <__divsf3_pse+0x26>
    1870:	9f 5f       	subi	r25, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	22 0f       	add	r18, r18
    1876:	33 1f       	adc	r19, r19
    1878:	44 1f       	adc	r20, r20
    187a:	aa 1f       	adc	r26, r26
    187c:	a9 f3       	breq	.-22     	; 0x1868 <__divsf3_pse+0x10>
    187e:	35 d0       	rcall	.+106    	; 0x18ea <__divsf3_pse+0x92>
    1880:	0e 2e       	mov	r0, r30
    1882:	3a f0       	brmi	.+14     	; 0x1892 <__divsf3_pse+0x3a>
    1884:	e0 e8       	ldi	r30, 0x80	; 128
    1886:	32 d0       	rcall	.+100    	; 0x18ec <__divsf3_pse+0x94>
    1888:	91 50       	subi	r25, 0x01	; 1
    188a:	50 40       	sbci	r21, 0x00	; 0
    188c:	e6 95       	lsr	r30
    188e:	00 1c       	adc	r0, r0
    1890:	ca f7       	brpl	.-14     	; 0x1884 <__divsf3_pse+0x2c>
    1892:	2b d0       	rcall	.+86     	; 0x18ea <__divsf3_pse+0x92>
    1894:	fe 2f       	mov	r31, r30
    1896:	29 d0       	rcall	.+82     	; 0x18ea <__divsf3_pse+0x92>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	bb 1f       	adc	r27, r27
    18a0:	26 17       	cp	r18, r22
    18a2:	37 07       	cpc	r19, r23
    18a4:	48 07       	cpc	r20, r24
    18a6:	ab 07       	cpc	r26, r27
    18a8:	b0 e8       	ldi	r27, 0x80	; 128
    18aa:	09 f0       	breq	.+2      	; 0x18ae <__divsf3_pse+0x56>
    18ac:	bb 0b       	sbc	r27, r27
    18ae:	80 2d       	mov	r24, r0
    18b0:	bf 01       	movw	r22, r30
    18b2:	ff 27       	eor	r31, r31
    18b4:	93 58       	subi	r25, 0x83	; 131
    18b6:	5f 4f       	sbci	r21, 0xFF	; 255
    18b8:	3a f0       	brmi	.+14     	; 0x18c8 <__divsf3_pse+0x70>
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	51 05       	cpc	r21, r1
    18be:	78 f0       	brcs	.+30     	; 0x18de <__divsf3_pse+0x86>
    18c0:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_inf>
    18c4:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_szero>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	e4 f3       	brlt	.-8      	; 0x18c4 <__divsf3_pse+0x6c>
    18cc:	98 3e       	cpi	r25, 0xE8	; 232
    18ce:	d4 f3       	brlt	.-12     	; 0x18c4 <__divsf3_pse+0x6c>
    18d0:	86 95       	lsr	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b7 95       	ror	r27
    18d8:	f7 95       	ror	r31
    18da:	9f 5f       	subi	r25, 0xFF	; 255
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__divsf3_pse+0x78>
    18de:	88 0f       	add	r24, r24
    18e0:	91 1d       	adc	r25, r1
    18e2:	96 95       	lsr	r25
    18e4:	87 95       	ror	r24
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret
    18ea:	e1 e0       	ldi	r30, 0x01	; 1
    18ec:	66 0f       	add	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	bb 1f       	adc	r27, r27
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	ba 07       	cpc	r27, r26
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__divsf3_pse+0xae>
    18fe:	62 1b       	sub	r22, r18
    1900:	73 0b       	sbc	r23, r19
    1902:	84 0b       	sbc	r24, r20
    1904:	ba 0b       	sbc	r27, r26
    1906:	ee 1f       	adc	r30, r30
    1908:	88 f7       	brcc	.-30     	; 0x18ec <__divsf3_pse+0x94>
    190a:	e0 95       	com	r30
    190c:	08 95       	ret

0000190e <__fixsfsi>:
    190e:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
    1912:	68 94       	set
    1914:	b1 11       	cpse	r27, r1
    1916:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_szero>
    191a:	08 95       	ret

0000191c <__fixunssfsi>:
    191c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fp_splitA>
    1920:	88 f0       	brcs	.+34     	; 0x1944 <__fixunssfsi+0x28>
    1922:	9f 57       	subi	r25, 0x7F	; 127
    1924:	98 f0       	brcs	.+38     	; 0x194c <__fixunssfsi+0x30>
    1926:	b9 2f       	mov	r27, r25
    1928:	99 27       	eor	r25, r25
    192a:	b7 51       	subi	r27, 0x17	; 23
    192c:	b0 f0       	brcs	.+44     	; 0x195a <__fixunssfsi+0x3e>
    192e:	e1 f0       	breq	.+56     	; 0x1968 <__fixunssfsi+0x4c>
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	1a f0       	brmi	.+6      	; 0x1940 <__fixunssfsi+0x24>
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__fixunssfsi+0x14>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <__fixunssfsi+0x4c>
    1940:	b1 30       	cpi	r27, 0x01	; 1
    1942:	91 f0       	breq	.+36     	; 0x1968 <__fixunssfsi+0x4c>
    1944:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fp_zero>
    1948:	b1 e0       	ldi	r27, 0x01	; 1
    194a:	08 95       	ret
    194c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_zero>
    1950:	67 2f       	mov	r22, r23
    1952:	78 2f       	mov	r23, r24
    1954:	88 27       	eor	r24, r24
    1956:	b8 5f       	subi	r27, 0xF8	; 248
    1958:	39 f0       	breq	.+14     	; 0x1968 <__fixunssfsi+0x4c>
    195a:	b9 3f       	cpi	r27, 0xF9	; 249
    195c:	cc f3       	brlt	.-14     	; 0x1950 <__fixunssfsi+0x34>
    195e:	86 95       	lsr	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	b3 95       	inc	r27
    1966:	d9 f7       	brne	.-10     	; 0x195e <__fixunssfsi+0x42>
    1968:	3e f4       	brtc	.+14     	; 0x1978 <__fixunssfsi+0x5c>
    196a:	90 95       	com	r25
    196c:	80 95       	com	r24
    196e:	70 95       	com	r23
    1970:	61 95       	neg	r22
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	08 95       	ret

0000197a <__floatunsisf>:
    197a:	e8 94       	clt
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <__floatsisf+0x12>

0000197e <__floatsisf>:
    197e:	97 fb       	bst	r25, 7
    1980:	3e f4       	brtc	.+14     	; 0x1990 <__floatsisf+0x12>
    1982:	90 95       	com	r25
    1984:	80 95       	com	r24
    1986:	70 95       	com	r23
    1988:	61 95       	neg	r22
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	8f 4f       	sbci	r24, 0xFF	; 255
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	99 23       	and	r25, r25
    1992:	a9 f0       	breq	.+42     	; 0x19be <__floatsisf+0x40>
    1994:	f9 2f       	mov	r31, r25
    1996:	96 e9       	ldi	r25, 0x96	; 150
    1998:	bb 27       	eor	r27, r27
    199a:	93 95       	inc	r25
    199c:	f6 95       	lsr	r31
    199e:	87 95       	ror	r24
    19a0:	77 95       	ror	r23
    19a2:	67 95       	ror	r22
    19a4:	b7 95       	ror	r27
    19a6:	f1 11       	cpse	r31, r1
    19a8:	f8 cf       	rjmp	.-16     	; 0x199a <__floatsisf+0x1c>
    19aa:	fa f4       	brpl	.+62     	; 0x19ea <__floatsisf+0x6c>
    19ac:	bb 0f       	add	r27, r27
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <__floatsisf+0x36>
    19b0:	60 ff       	sbrs	r22, 0
    19b2:	1b c0       	rjmp	.+54     	; 0x19ea <__floatsisf+0x6c>
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	16 c0       	rjmp	.+44     	; 0x19ea <__floatsisf+0x6c>
    19be:	88 23       	and	r24, r24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <__floatsisf+0x48>
    19c2:	96 e9       	ldi	r25, 0x96	; 150
    19c4:	11 c0       	rjmp	.+34     	; 0x19e8 <__floatsisf+0x6a>
    19c6:	77 23       	and	r23, r23
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <__floatsisf+0x54>
    19ca:	9e e8       	ldi	r25, 0x8E	; 142
    19cc:	87 2f       	mov	r24, r23
    19ce:	76 2f       	mov	r23, r22
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <__floatsisf+0x5e>
    19d2:	66 23       	and	r22, r22
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <__floatsisf+0x74>
    19d6:	96 e8       	ldi	r25, 0x86	; 134
    19d8:	86 2f       	mov	r24, r22
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	2a f0       	brmi	.+10     	; 0x19ea <__floatsisf+0x6c>
    19e0:	9a 95       	dec	r25
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	da f7       	brpl	.-10     	; 0x19e0 <__floatsisf+0x62>
    19ea:	88 0f       	add	r24, r24
    19ec:	96 95       	lsr	r25
    19ee:	87 95       	ror	r24
    19f0:	97 f9       	bld	r25, 7
    19f2:	08 95       	ret

000019f4 <__fp_cmp>:
    19f4:	99 0f       	add	r25, r25
    19f6:	00 08       	sbc	r0, r0
    19f8:	55 0f       	add	r21, r21
    19fa:	aa 0b       	sbc	r26, r26
    19fc:	e0 e8       	ldi	r30, 0x80	; 128
    19fe:	fe ef       	ldi	r31, 0xFE	; 254
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	e8 07       	cpc	r30, r24
    1a06:	f9 07       	cpc	r31, r25
    1a08:	c0 f0       	brcs	.+48     	; 0x1a3a <__fp_cmp+0x46>
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	e4 07       	cpc	r30, r20
    1a10:	f5 07       	cpc	r31, r21
    1a12:	98 f0       	brcs	.+38     	; 0x1a3a <__fp_cmp+0x46>
    1a14:	62 1b       	sub	r22, r18
    1a16:	73 0b       	sbc	r23, r19
    1a18:	84 0b       	sbc	r24, r20
    1a1a:	95 0b       	sbc	r25, r21
    1a1c:	39 f4       	brne	.+14     	; 0x1a2c <__fp_cmp+0x38>
    1a1e:	0a 26       	eor	r0, r26
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <__fp_cmp+0x46>
    1a22:	23 2b       	or	r18, r19
    1a24:	24 2b       	or	r18, r20
    1a26:	25 2b       	or	r18, r21
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <__fp_cmp+0x3e>
    1a2a:	08 95       	ret
    1a2c:	0a 26       	eor	r0, r26
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <__fp_cmp+0x3e>
    1a30:	a1 40       	sbci	r26, 0x01	; 1
    1a32:	a6 95       	lsr	r26
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	81 1d       	adc	r24, r1
    1a38:	81 1d       	adc	r24, r1
    1a3a:	08 95       	ret

00001a3c <__fp_inf>:
    1a3c:	97 f9       	bld	r25, 7
    1a3e:	9f 67       	ori	r25, 0x7F	; 127
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	08 95       	ret

00001a48 <__fp_nan>:
    1a48:	9f ef       	ldi	r25, 0xFF	; 255
    1a4a:	80 ec       	ldi	r24, 0xC0	; 192
    1a4c:	08 95       	ret

00001a4e <__fp_pscA>:
    1a4e:	00 24       	eor	r0, r0
    1a50:	0a 94       	dec	r0
    1a52:	16 16       	cp	r1, r22
    1a54:	17 06       	cpc	r1, r23
    1a56:	18 06       	cpc	r1, r24
    1a58:	09 06       	cpc	r0, r25
    1a5a:	08 95       	ret

00001a5c <__fp_pscB>:
    1a5c:	00 24       	eor	r0, r0
    1a5e:	0a 94       	dec	r0
    1a60:	12 16       	cp	r1, r18
    1a62:	13 06       	cpc	r1, r19
    1a64:	14 06       	cpc	r1, r20
    1a66:	05 06       	cpc	r0, r21
    1a68:	08 95       	ret

00001a6a <__fp_round>:
    1a6a:	09 2e       	mov	r0, r25
    1a6c:	03 94       	inc	r0
    1a6e:	00 0c       	add	r0, r0
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <__fp_round+0xc>
    1a72:	88 23       	and	r24, r24
    1a74:	52 f0       	brmi	.+20     	; 0x1a8a <__fp_round+0x20>
    1a76:	bb 0f       	add	r27, r27
    1a78:	40 f4       	brcc	.+16     	; 0x1a8a <__fp_round+0x20>
    1a7a:	bf 2b       	or	r27, r31
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <__fp_round+0x18>
    1a7e:	60 ff       	sbrs	r22, 0
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <__fp_round+0x20>
    1a82:	6f 5f       	subi	r22, 0xFF	; 255
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	8f 4f       	sbci	r24, 0xFF	; 255
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	08 95       	ret

00001a8c <__fp_split3>:
    1a8c:	57 fd       	sbrc	r21, 7
    1a8e:	90 58       	subi	r25, 0x80	; 128
    1a90:	44 0f       	add	r20, r20
    1a92:	55 1f       	adc	r21, r21
    1a94:	59 f0       	breq	.+22     	; 0x1aac <__fp_splitA+0x10>
    1a96:	5f 3f       	cpi	r21, 0xFF	; 255
    1a98:	71 f0       	breq	.+28     	; 0x1ab6 <__fp_splitA+0x1a>
    1a9a:	47 95       	ror	r20

00001a9c <__fp_splitA>:
    1a9c:	88 0f       	add	r24, r24
    1a9e:	97 fb       	bst	r25, 7
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	61 f0       	breq	.+24     	; 0x1abc <__fp_splitA+0x20>
    1aa4:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa6:	79 f0       	breq	.+30     	; 0x1ac6 <__fp_splitA+0x2a>
    1aa8:	87 95       	ror	r24
    1aaa:	08 95       	ret
    1aac:	12 16       	cp	r1, r18
    1aae:	13 06       	cpc	r1, r19
    1ab0:	14 06       	cpc	r1, r20
    1ab2:	55 1f       	adc	r21, r21
    1ab4:	f2 cf       	rjmp	.-28     	; 0x1a9a <__fp_split3+0xe>
    1ab6:	46 95       	lsr	r20
    1ab8:	f1 df       	rcall	.-30     	; 0x1a9c <__fp_splitA>
    1aba:	08 c0       	rjmp	.+16     	; 0x1acc <__fp_splitA+0x30>
    1abc:	16 16       	cp	r1, r22
    1abe:	17 06       	cpc	r1, r23
    1ac0:	18 06       	cpc	r1, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	f1 cf       	rjmp	.-30     	; 0x1aa8 <__fp_splitA+0xc>
    1ac6:	86 95       	lsr	r24
    1ac8:	71 05       	cpc	r23, r1
    1aca:	61 05       	cpc	r22, r1
    1acc:	08 94       	sec
    1ace:	08 95       	ret

00001ad0 <__fp_zero>:
    1ad0:	e8 94       	clt

00001ad2 <__fp_szero>:
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	66 27       	eor	r22, r22
    1ad6:	77 27       	eor	r23, r23
    1ad8:	cb 01       	movw	r24, r22
    1ada:	97 f9       	bld	r25, 7
    1adc:	08 95       	ret

00001ade <__gesf2>:
    1ade:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fp_cmp>
    1ae2:	08 f4       	brcc	.+2      	; 0x1ae6 <__gesf2+0x8>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	08 95       	ret

00001ae8 <__mulsf3>:
    1ae8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__mulsf3x>
    1aec:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__fp_round>
    1af0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_pscA>
    1af4:	38 f0       	brcs	.+14     	; 0x1b04 <__mulsf3+0x1c>
    1af6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_pscB>
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__mulsf3+0x1c>
    1afc:	95 23       	and	r25, r21
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <__mulsf3+0x1c>
    1b00:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_inf>
    1b04:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_nan>
    1b08:	11 24       	eor	r1, r1
    1b0a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_szero>

00001b0e <__mulsf3x>:
    1b0e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_split3>
    1b12:	70 f3       	brcs	.-36     	; 0x1af0 <__mulsf3+0x8>

00001b14 <__mulsf3_pse>:
    1b14:	95 9f       	mul	r25, r21
    1b16:	c1 f3       	breq	.-16     	; 0x1b08 <__mulsf3+0x20>
    1b18:	95 0f       	add	r25, r21
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	55 1f       	adc	r21, r21
    1b1e:	62 9f       	mul	r22, r18
    1b20:	f0 01       	movw	r30, r0
    1b22:	72 9f       	mul	r23, r18
    1b24:	bb 27       	eor	r27, r27
    1b26:	f0 0d       	add	r31, r0
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	63 9f       	mul	r22, r19
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	f0 0d       	add	r31, r0
    1b30:	b1 1d       	adc	r27, r1
    1b32:	aa 1f       	adc	r26, r26
    1b34:	64 9f       	mul	r22, r20
    1b36:	66 27       	eor	r22, r22
    1b38:	b0 0d       	add	r27, r0
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	82 9f       	mul	r24, r18
    1b40:	22 27       	eor	r18, r18
    1b42:	b0 0d       	add	r27, r0
    1b44:	a1 1d       	adc	r26, r1
    1b46:	62 1f       	adc	r22, r18
    1b48:	73 9f       	mul	r23, r19
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	a1 1d       	adc	r26, r1
    1b4e:	62 1f       	adc	r22, r18
    1b50:	83 9f       	mul	r24, r19
    1b52:	a0 0d       	add	r26, r0
    1b54:	61 1d       	adc	r22, r1
    1b56:	22 1f       	adc	r18, r18
    1b58:	74 9f       	mul	r23, r20
    1b5a:	33 27       	eor	r19, r19
    1b5c:	a0 0d       	add	r26, r0
    1b5e:	61 1d       	adc	r22, r1
    1b60:	23 1f       	adc	r18, r19
    1b62:	84 9f       	mul	r24, r20
    1b64:	60 0d       	add	r22, r0
    1b66:	21 1d       	adc	r18, r1
    1b68:	82 2f       	mov	r24, r18
    1b6a:	76 2f       	mov	r23, r22
    1b6c:	6a 2f       	mov	r22, r26
    1b6e:	11 24       	eor	r1, r1
    1b70:	9f 57       	subi	r25, 0x7F	; 127
    1b72:	50 40       	sbci	r21, 0x00	; 0
    1b74:	9a f0       	brmi	.+38     	; 0x1b9c <__mulsf3_pse+0x88>
    1b76:	f1 f0       	breq	.+60     	; 0x1bb4 <__mulsf3_pse+0xa0>
    1b78:	88 23       	and	r24, r24
    1b7a:	4a f0       	brmi	.+18     	; 0x1b8e <__mulsf3_pse+0x7a>
    1b7c:	ee 0f       	add	r30, r30
    1b7e:	ff 1f       	adc	r31, r31
    1b80:	bb 1f       	adc	r27, r27
    1b82:	66 1f       	adc	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	91 50       	subi	r25, 0x01	; 1
    1b8a:	50 40       	sbci	r21, 0x00	; 0
    1b8c:	a9 f7       	brne	.-22     	; 0x1b78 <__mulsf3_pse+0x64>
    1b8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b90:	51 05       	cpc	r21, r1
    1b92:	80 f0       	brcs	.+32     	; 0x1bb4 <__mulsf3_pse+0xa0>
    1b94:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__fp_inf>
    1b98:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_szero>
    1b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9e:	e4 f3       	brlt	.-8      	; 0x1b98 <__mulsf3_pse+0x84>
    1ba0:	98 3e       	cpi	r25, 0xE8	; 232
    1ba2:	d4 f3       	brlt	.-12     	; 0x1b98 <__mulsf3_pse+0x84>
    1ba4:	86 95       	lsr	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	f7 95       	ror	r31
    1bae:	e7 95       	ror	r30
    1bb0:	9f 5f       	subi	r25, 0xFF	; 255
    1bb2:	c1 f7       	brne	.-16     	; 0x1ba4 <__mulsf3_pse+0x90>
    1bb4:	fe 2b       	or	r31, r30
    1bb6:	88 0f       	add	r24, r24
    1bb8:	91 1d       	adc	r25, r1
    1bba:	96 95       	lsr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	97 f9       	bld	r25, 7
    1bc0:	08 95       	ret

00001bc2 <__divmodhi4>:
    1bc2:	97 fb       	bst	r25, 7
    1bc4:	07 2e       	mov	r0, r23
    1bc6:	16 f4       	brtc	.+4      	; 0x1bcc <__divmodhi4+0xa>
    1bc8:	00 94       	com	r0
    1bca:	07 d0       	rcall	.+14     	; 0x1bda <__divmodhi4_neg1>
    1bcc:	77 fd       	sbrc	r23, 7
    1bce:	09 d0       	rcall	.+18     	; 0x1be2 <__divmodhi4_neg2>
    1bd0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__udivmodhi4>
    1bd4:	07 fc       	sbrc	r0, 7
    1bd6:	05 d0       	rcall	.+10     	; 0x1be2 <__divmodhi4_neg2>
    1bd8:	3e f4       	brtc	.+14     	; 0x1be8 <__divmodhi4_exit>

00001bda <__divmodhi4_neg1>:
    1bda:	90 95       	com	r25
    1bdc:	81 95       	neg	r24
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	08 95       	ret

00001be2 <__divmodhi4_neg2>:
    1be2:	70 95       	com	r23
    1be4:	61 95       	neg	r22
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255

00001be8 <__divmodhi4_exit>:
    1be8:	08 95       	ret

00001bea <__udivmodsi4>:
    1bea:	a1 e2       	ldi	r26, 0x21	; 33
    1bec:	1a 2e       	mov	r1, r26
    1bee:	aa 1b       	sub	r26, r26
    1bf0:	bb 1b       	sub	r27, r27
    1bf2:	fd 01       	movw	r30, r26
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <__udivmodsi4_ep>

00001bf6 <__udivmodsi4_loop>:
    1bf6:	aa 1f       	adc	r26, r26
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	ee 1f       	adc	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	a2 17       	cp	r26, r18
    1c00:	b3 07       	cpc	r27, r19
    1c02:	e4 07       	cpc	r30, r20
    1c04:	f5 07       	cpc	r31, r21
    1c06:	20 f0       	brcs	.+8      	; 0x1c10 <__udivmodsi4_ep>
    1c08:	a2 1b       	sub	r26, r18
    1c0a:	b3 0b       	sbc	r27, r19
    1c0c:	e4 0b       	sbc	r30, r20
    1c0e:	f5 0b       	sbc	r31, r21

00001c10 <__udivmodsi4_ep>:
    1c10:	66 1f       	adc	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	1a 94       	dec	r1
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <__udivmodsi4_loop>
    1c1c:	60 95       	com	r22
    1c1e:	70 95       	com	r23
    1c20:	80 95       	com	r24
    1c22:	90 95       	com	r25
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	bd 01       	movw	r22, r26
    1c2a:	cf 01       	movw	r24, r30
    1c2c:	08 95       	ret

00001c2e <__divmodsi4>:
    1c2e:	05 2e       	mov	r0, r21
    1c30:	97 fb       	bst	r25, 7
    1c32:	1e f4       	brtc	.+6      	; 0x1c3a <__divmodsi4+0xc>
    1c34:	00 94       	com	r0
    1c36:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__negsi2>
    1c3a:	57 fd       	sbrc	r21, 7
    1c3c:	07 d0       	rcall	.+14     	; 0x1c4c <__divmodsi4_neg2>
    1c3e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__udivmodsi4>
    1c42:	07 fc       	sbrc	r0, 7
    1c44:	03 d0       	rcall	.+6      	; 0x1c4c <__divmodsi4_neg2>
    1c46:	4e f4       	brtc	.+18     	; 0x1c5a <__divmodsi4_exit>
    1c48:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__negsi2>

00001c4c <__divmodsi4_neg2>:
    1c4c:	50 95       	com	r21
    1c4e:	40 95       	com	r20
    1c50:	30 95       	com	r19
    1c52:	21 95       	neg	r18
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	4f 4f       	sbci	r20, 0xFF	; 255
    1c58:	5f 4f       	sbci	r21, 0xFF	; 255

00001c5a <__divmodsi4_exit>:
    1c5a:	08 95       	ret

00001c5c <__negsi2>:
    1c5c:	90 95       	com	r25
    1c5e:	80 95       	com	r24
    1c60:	70 95       	com	r23
    1c62:	61 95       	neg	r22
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	08 95       	ret

00001c6c <__umulhisi3>:
    1c6c:	a2 9f       	mul	r26, r18
    1c6e:	b0 01       	movw	r22, r0
    1c70:	b3 9f       	mul	r27, r19
    1c72:	c0 01       	movw	r24, r0
    1c74:	a3 9f       	mul	r26, r19
    1c76:	70 0d       	add	r23, r0
    1c78:	81 1d       	adc	r24, r1
    1c7a:	11 24       	eor	r1, r1
    1c7c:	91 1d       	adc	r25, r1
    1c7e:	b2 9f       	mul	r27, r18
    1c80:	70 0d       	add	r23, r0
    1c82:	81 1d       	adc	r24, r1
    1c84:	11 24       	eor	r1, r1
    1c86:	91 1d       	adc	r25, r1
    1c88:	08 95       	ret

00001c8a <__udivmodhi4>:
    1c8a:	aa 1b       	sub	r26, r26
    1c8c:	bb 1b       	sub	r27, r27
    1c8e:	51 e1       	ldi	r21, 0x11	; 17
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <__udivmodhi4_ep>

00001c92 <__udivmodhi4_loop>:
    1c92:	aa 1f       	adc	r26, r26
    1c94:	bb 1f       	adc	r27, r27
    1c96:	a6 17       	cp	r26, r22
    1c98:	b7 07       	cpc	r27, r23
    1c9a:	10 f0       	brcs	.+4      	; 0x1ca0 <__udivmodhi4_ep>
    1c9c:	a6 1b       	sub	r26, r22
    1c9e:	b7 0b       	sbc	r27, r23

00001ca0 <__udivmodhi4_ep>:
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	5a 95       	dec	r21
    1ca6:	a9 f7       	brne	.-22     	; 0x1c92 <__udivmodhi4_loop>
    1ca8:	80 95       	com	r24
    1caa:	90 95       	com	r25
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	08 95       	ret

00001cb2 <sprintf>:
    1cb2:	ae e0       	ldi	r26, 0x0E	; 14
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ef e5       	ldi	r30, 0x5F	; 95
    1cb8:	fe e0       	ldi	r31, 0x0E	; 14
    1cba:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x1c>
    1cbe:	0d 89       	ldd	r16, Y+21	; 0x15
    1cc0:	1e 89       	ldd	r17, Y+22	; 0x16
    1cc2:	86 e0       	ldi	r24, 0x06	; 6
    1cc4:	8c 83       	std	Y+4, r24	; 0x04
    1cc6:	1a 83       	std	Y+2, r17	; 0x02
    1cc8:	09 83       	std	Y+1, r16	; 0x01
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	9f e7       	ldi	r25, 0x7F	; 127
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	ae 01       	movw	r20, r28
    1cd4:	47 5e       	subi	r20, 0xE7	; 231
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	6f 89       	ldd	r22, Y+23	; 0x17
    1cda:	78 8d       	ldd	r23, Y+24	; 0x18
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <vfprintf>
    1ce4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ce6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ce8:	e0 0f       	add	r30, r16
    1cea:	f1 1f       	adc	r31, r17
    1cec:	10 82       	st	Z, r1
    1cee:	2e 96       	adiw	r28, 0x0e	; 14
    1cf0:	e4 e0       	ldi	r30, 0x04	; 4
    1cf2:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x1c>

00001cf6 <vfprintf>:
    1cf6:	ab e0       	ldi	r26, 0x0B	; 11
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e8       	ldi	r30, 0x81	; 129
    1cfc:	fe e0       	ldi	r31, 0x0E	; 14
    1cfe:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__prologue_saves__>
    1d02:	6c 01       	movw	r12, r24
    1d04:	7b 01       	movw	r14, r22
    1d06:	8a 01       	movw	r16, r20
    1d08:	fc 01       	movw	r30, r24
    1d0a:	17 82       	std	Z+7, r1	; 0x07
    1d0c:	16 82       	std	Z+6, r1	; 0x06
    1d0e:	83 81       	ldd	r24, Z+3	; 0x03
    1d10:	81 ff       	sbrs	r24, 1
    1d12:	cc c1       	rjmp	.+920    	; 0x20ac <vfprintf+0x3b6>
    1d14:	ce 01       	movw	r24, r28
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	3c 01       	movw	r6, r24
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	f7 01       	movw	r30, r14
    1d20:	93 fd       	sbrc	r25, 3
    1d22:	85 91       	lpm	r24, Z+
    1d24:	93 ff       	sbrs	r25, 3
    1d26:	81 91       	ld	r24, Z+
    1d28:	7f 01       	movw	r14, r30
    1d2a:	88 23       	and	r24, r24
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <vfprintf+0x3a>
    1d2e:	ba c1       	rjmp	.+884    	; 0x20a4 <vfprintf+0x3ae>
    1d30:	85 32       	cpi	r24, 0x25	; 37
    1d32:	39 f4       	brne	.+14     	; 0x1d42 <vfprintf+0x4c>
    1d34:	93 fd       	sbrc	r25, 3
    1d36:	85 91       	lpm	r24, Z+
    1d38:	93 ff       	sbrs	r25, 3
    1d3a:	81 91       	ld	r24, Z+
    1d3c:	7f 01       	movw	r14, r30
    1d3e:	85 32       	cpi	r24, 0x25	; 37
    1d40:	29 f4       	brne	.+10     	; 0x1d4c <vfprintf+0x56>
    1d42:	b6 01       	movw	r22, r12
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    1d4a:	e7 cf       	rjmp	.-50     	; 0x1d1a <vfprintf+0x24>
    1d4c:	91 2c       	mov	r9, r1
    1d4e:	21 2c       	mov	r2, r1
    1d50:	31 2c       	mov	r3, r1
    1d52:	ff e1       	ldi	r31, 0x1F	; 31
    1d54:	f3 15       	cp	r31, r3
    1d56:	d8 f0       	brcs	.+54     	; 0x1d8e <vfprintf+0x98>
    1d58:	8b 32       	cpi	r24, 0x2B	; 43
    1d5a:	79 f0       	breq	.+30     	; 0x1d7a <vfprintf+0x84>
    1d5c:	38 f4       	brcc	.+14     	; 0x1d6c <vfprintf+0x76>
    1d5e:	80 32       	cpi	r24, 0x20	; 32
    1d60:	79 f0       	breq	.+30     	; 0x1d80 <vfprintf+0x8a>
    1d62:	83 32       	cpi	r24, 0x23	; 35
    1d64:	a1 f4       	brne	.+40     	; 0x1d8e <vfprintf+0x98>
    1d66:	23 2d       	mov	r18, r3
    1d68:	20 61       	ori	r18, 0x10	; 16
    1d6a:	1d c0       	rjmp	.+58     	; 0x1da6 <vfprintf+0xb0>
    1d6c:	8d 32       	cpi	r24, 0x2D	; 45
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <vfprintf+0x92>
    1d70:	80 33       	cpi	r24, 0x30	; 48
    1d72:	69 f4       	brne	.+26     	; 0x1d8e <vfprintf+0x98>
    1d74:	23 2d       	mov	r18, r3
    1d76:	21 60       	ori	r18, 0x01	; 1
    1d78:	16 c0       	rjmp	.+44     	; 0x1da6 <vfprintf+0xb0>
    1d7a:	83 2d       	mov	r24, r3
    1d7c:	82 60       	ori	r24, 0x02	; 2
    1d7e:	38 2e       	mov	r3, r24
    1d80:	e3 2d       	mov	r30, r3
    1d82:	e4 60       	ori	r30, 0x04	; 4
    1d84:	3e 2e       	mov	r3, r30
    1d86:	2a c0       	rjmp	.+84     	; 0x1ddc <vfprintf+0xe6>
    1d88:	f3 2d       	mov	r31, r3
    1d8a:	f8 60       	ori	r31, 0x08	; 8
    1d8c:	1d c0       	rjmp	.+58     	; 0x1dc8 <vfprintf+0xd2>
    1d8e:	37 fc       	sbrc	r3, 7
    1d90:	2d c0       	rjmp	.+90     	; 0x1dec <vfprintf+0xf6>
    1d92:	20 ed       	ldi	r18, 0xD0	; 208
    1d94:	28 0f       	add	r18, r24
    1d96:	2a 30       	cpi	r18, 0x0A	; 10
    1d98:	40 f0       	brcs	.+16     	; 0x1daa <vfprintf+0xb4>
    1d9a:	8e 32       	cpi	r24, 0x2E	; 46
    1d9c:	b9 f4       	brne	.+46     	; 0x1dcc <vfprintf+0xd6>
    1d9e:	36 fc       	sbrc	r3, 6
    1da0:	81 c1       	rjmp	.+770    	; 0x20a4 <vfprintf+0x3ae>
    1da2:	23 2d       	mov	r18, r3
    1da4:	20 64       	ori	r18, 0x40	; 64
    1da6:	32 2e       	mov	r3, r18
    1da8:	19 c0       	rjmp	.+50     	; 0x1ddc <vfprintf+0xe6>
    1daa:	36 fe       	sbrs	r3, 6
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0xc4>
    1dae:	8a e0       	ldi	r24, 0x0A	; 10
    1db0:	98 9e       	mul	r9, r24
    1db2:	20 0d       	add	r18, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	92 2e       	mov	r9, r18
    1db8:	11 c0       	rjmp	.+34     	; 0x1ddc <vfprintf+0xe6>
    1dba:	ea e0       	ldi	r30, 0x0A	; 10
    1dbc:	2e 9e       	mul	r2, r30
    1dbe:	20 0d       	add	r18, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	22 2e       	mov	r2, r18
    1dc4:	f3 2d       	mov	r31, r3
    1dc6:	f0 62       	ori	r31, 0x20	; 32
    1dc8:	3f 2e       	mov	r3, r31
    1dca:	08 c0       	rjmp	.+16     	; 0x1ddc <vfprintf+0xe6>
    1dcc:	8c 36       	cpi	r24, 0x6C	; 108
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <vfprintf+0xe2>
    1dd0:	83 2d       	mov	r24, r3
    1dd2:	80 68       	ori	r24, 0x80	; 128
    1dd4:	38 2e       	mov	r3, r24
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <vfprintf+0xe6>
    1dd8:	88 36       	cpi	r24, 0x68	; 104
    1dda:	41 f4       	brne	.+16     	; 0x1dec <vfprintf+0xf6>
    1ddc:	f7 01       	movw	r30, r14
    1dde:	93 fd       	sbrc	r25, 3
    1de0:	85 91       	lpm	r24, Z+
    1de2:	93 ff       	sbrs	r25, 3
    1de4:	81 91       	ld	r24, Z+
    1de6:	7f 01       	movw	r14, r30
    1de8:	81 11       	cpse	r24, r1
    1dea:	b3 cf       	rjmp	.-154    	; 0x1d52 <vfprintf+0x5c>
    1dec:	98 2f       	mov	r25, r24
    1dee:	9f 7d       	andi	r25, 0xDF	; 223
    1df0:	95 54       	subi	r25, 0x45	; 69
    1df2:	93 30       	cpi	r25, 0x03	; 3
    1df4:	28 f4       	brcc	.+10     	; 0x1e00 <vfprintf+0x10a>
    1df6:	0c 5f       	subi	r16, 0xFC	; 252
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	9f e3       	ldi	r25, 0x3F	; 63
    1dfc:	99 83       	std	Y+1, r25	; 0x01
    1dfe:	0d c0       	rjmp	.+26     	; 0x1e1a <vfprintf+0x124>
    1e00:	83 36       	cpi	r24, 0x63	; 99
    1e02:	31 f0       	breq	.+12     	; 0x1e10 <vfprintf+0x11a>
    1e04:	83 37       	cpi	r24, 0x73	; 115
    1e06:	71 f0       	breq	.+28     	; 0x1e24 <vfprintf+0x12e>
    1e08:	83 35       	cpi	r24, 0x53	; 83
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <vfprintf+0x118>
    1e0c:	59 c0       	rjmp	.+178    	; 0x1ec0 <vfprintf+0x1ca>
    1e0e:	21 c0       	rjmp	.+66     	; 0x1e52 <vfprintf+0x15c>
    1e10:	f8 01       	movw	r30, r16
    1e12:	80 81       	ld	r24, Z
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	0e 5f       	subi	r16, 0xFE	; 254
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	88 24       	eor	r8, r8
    1e1c:	83 94       	inc	r8
    1e1e:	91 2c       	mov	r9, r1
    1e20:	53 01       	movw	r10, r6
    1e22:	13 c0       	rjmp	.+38     	; 0x1e4a <vfprintf+0x154>
    1e24:	28 01       	movw	r4, r16
    1e26:	f2 e0       	ldi	r31, 0x02	; 2
    1e28:	4f 0e       	add	r4, r31
    1e2a:	51 1c       	adc	r5, r1
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	a0 80       	ld	r10, Z
    1e30:	b1 80       	ldd	r11, Z+1	; 0x01
    1e32:	36 fe       	sbrs	r3, 6
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <vfprintf+0x146>
    1e36:	69 2d       	mov	r22, r9
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0x14a>
    1e3c:	6f ef       	ldi	r22, 0xFF	; 255
    1e3e:	7f ef       	ldi	r23, 0xFF	; 255
    1e40:	c5 01       	movw	r24, r10
    1e42:	0e 94 67 10 	call	0x20ce	; 0x20ce <strnlen>
    1e46:	4c 01       	movw	r8, r24
    1e48:	82 01       	movw	r16, r4
    1e4a:	f3 2d       	mov	r31, r3
    1e4c:	ff 77       	andi	r31, 0x7F	; 127
    1e4e:	3f 2e       	mov	r3, r31
    1e50:	16 c0       	rjmp	.+44     	; 0x1e7e <vfprintf+0x188>
    1e52:	28 01       	movw	r4, r16
    1e54:	22 e0       	ldi	r18, 0x02	; 2
    1e56:	42 0e       	add	r4, r18
    1e58:	51 1c       	adc	r5, r1
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	a0 80       	ld	r10, Z
    1e5e:	b1 80       	ldd	r11, Z+1	; 0x01
    1e60:	36 fe       	sbrs	r3, 6
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <vfprintf+0x174>
    1e64:	69 2d       	mov	r22, r9
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <vfprintf+0x178>
    1e6a:	6f ef       	ldi	r22, 0xFF	; 255
    1e6c:	7f ef       	ldi	r23, 0xFF	; 255
    1e6e:	c5 01       	movw	r24, r10
    1e70:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <strnlen_P>
    1e74:	4c 01       	movw	r8, r24
    1e76:	f3 2d       	mov	r31, r3
    1e78:	f0 68       	ori	r31, 0x80	; 128
    1e7a:	3f 2e       	mov	r3, r31
    1e7c:	82 01       	movw	r16, r4
    1e7e:	33 fc       	sbrc	r3, 3
    1e80:	1b c0       	rjmp	.+54     	; 0x1eb8 <vfprintf+0x1c2>
    1e82:	82 2d       	mov	r24, r2
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	88 16       	cp	r8, r24
    1e88:	99 06       	cpc	r9, r25
    1e8a:	b0 f4       	brcc	.+44     	; 0x1eb8 <vfprintf+0x1c2>
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    1e96:	2a 94       	dec	r2
    1e98:	f4 cf       	rjmp	.-24     	; 0x1e82 <vfprintf+0x18c>
    1e9a:	f5 01       	movw	r30, r10
    1e9c:	37 fc       	sbrc	r3, 7
    1e9e:	85 91       	lpm	r24, Z+
    1ea0:	37 fe       	sbrs	r3, 7
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	5f 01       	movw	r10, r30
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    1eae:	21 10       	cpse	r2, r1
    1eb0:	2a 94       	dec	r2
    1eb2:	21 e0       	ldi	r18, 0x01	; 1
    1eb4:	82 1a       	sub	r8, r18
    1eb6:	91 08       	sbc	r9, r1
    1eb8:	81 14       	cp	r8, r1
    1eba:	91 04       	cpc	r9, r1
    1ebc:	71 f7       	brne	.-36     	; 0x1e9a <vfprintf+0x1a4>
    1ebe:	e8 c0       	rjmp	.+464    	; 0x2090 <vfprintf+0x39a>
    1ec0:	84 36       	cpi	r24, 0x64	; 100
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <vfprintf+0x1d2>
    1ec4:	89 36       	cpi	r24, 0x69	; 105
    1ec6:	41 f5       	brne	.+80     	; 0x1f18 <vfprintf+0x222>
    1ec8:	f8 01       	movw	r30, r16
    1eca:	37 fe       	sbrs	r3, 7
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <vfprintf+0x1e6>
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	0c 5f       	subi	r16, 0xFC	; 252
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <vfprintf+0x1f6>
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	07 2e       	mov	r0, r23
    1ee2:	00 0c       	add	r0, r0
    1ee4:	88 0b       	sbc	r24, r24
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	0e 5f       	subi	r16, 0xFE	; 254
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	f3 2d       	mov	r31, r3
    1eee:	ff 76       	andi	r31, 0x6F	; 111
    1ef0:	3f 2e       	mov	r3, r31
    1ef2:	97 ff       	sbrs	r25, 7
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <vfprintf+0x212>
    1ef6:	90 95       	com	r25
    1ef8:	80 95       	com	r24
    1efa:	70 95       	com	r23
    1efc:	61 95       	neg	r22
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	f0 68       	ori	r31, 0x80	; 128
    1f06:	3f 2e       	mov	r3, r31
    1f08:	2a e0       	ldi	r18, 0x0A	; 10
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	a3 01       	movw	r20, r6
    1f0e:	0e 94 ae 10 	call	0x215c	; 0x215c <__ultoa_invert>
    1f12:	88 2e       	mov	r8, r24
    1f14:	86 18       	sub	r8, r6
    1f16:	45 c0       	rjmp	.+138    	; 0x1fa2 <vfprintf+0x2ac>
    1f18:	85 37       	cpi	r24, 0x75	; 117
    1f1a:	31 f4       	brne	.+12     	; 0x1f28 <vfprintf+0x232>
    1f1c:	23 2d       	mov	r18, r3
    1f1e:	2f 7e       	andi	r18, 0xEF	; 239
    1f20:	b2 2e       	mov	r11, r18
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	25 c0       	rjmp	.+74     	; 0x1f72 <vfprintf+0x27c>
    1f28:	93 2d       	mov	r25, r3
    1f2a:	99 7f       	andi	r25, 0xF9	; 249
    1f2c:	b9 2e       	mov	r11, r25
    1f2e:	8f 36       	cpi	r24, 0x6F	; 111
    1f30:	c1 f0       	breq	.+48     	; 0x1f62 <vfprintf+0x26c>
    1f32:	18 f4       	brcc	.+6      	; 0x1f3a <vfprintf+0x244>
    1f34:	88 35       	cpi	r24, 0x58	; 88
    1f36:	79 f0       	breq	.+30     	; 0x1f56 <vfprintf+0x260>
    1f38:	b5 c0       	rjmp	.+362    	; 0x20a4 <vfprintf+0x3ae>
    1f3a:	80 37       	cpi	r24, 0x70	; 112
    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <vfprintf+0x24e>
    1f3e:	88 37       	cpi	r24, 0x78	; 120
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <vfprintf+0x254>
    1f42:	b0 c0       	rjmp	.+352    	; 0x20a4 <vfprintf+0x3ae>
    1f44:	e9 2f       	mov	r30, r25
    1f46:	e0 61       	ori	r30, 0x10	; 16
    1f48:	be 2e       	mov	r11, r30
    1f4a:	b4 fe       	sbrs	r11, 4
    1f4c:	0d c0       	rjmp	.+26     	; 0x1f68 <vfprintf+0x272>
    1f4e:	fb 2d       	mov	r31, r11
    1f50:	f4 60       	ori	r31, 0x04	; 4
    1f52:	bf 2e       	mov	r11, r31
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <vfprintf+0x272>
    1f56:	34 fe       	sbrs	r3, 4
    1f58:	0a c0       	rjmp	.+20     	; 0x1f6e <vfprintf+0x278>
    1f5a:	29 2f       	mov	r18, r25
    1f5c:	26 60       	ori	r18, 0x06	; 6
    1f5e:	b2 2e       	mov	r11, r18
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <vfprintf+0x278>
    1f62:	28 e0       	ldi	r18, 0x08	; 8
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <vfprintf+0x27c>
    1f68:	20 e1       	ldi	r18, 0x10	; 16
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <vfprintf+0x27c>
    1f6e:	20 e1       	ldi	r18, 0x10	; 16
    1f70:	32 e0       	ldi	r19, 0x02	; 2
    1f72:	f8 01       	movw	r30, r16
    1f74:	b7 fe       	sbrs	r11, 7
    1f76:	07 c0       	rjmp	.+14     	; 0x1f86 <vfprintf+0x290>
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	0c 5f       	subi	r16, 0xFC	; 252
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <vfprintf+0x29c>
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 5f       	subi	r16, 0xFE	; 254
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	a3 01       	movw	r20, r6
    1f94:	0e 94 ae 10 	call	0x215c	; 0x215c <__ultoa_invert>
    1f98:	88 2e       	mov	r8, r24
    1f9a:	86 18       	sub	r8, r6
    1f9c:	fb 2d       	mov	r31, r11
    1f9e:	ff 77       	andi	r31, 0x7F	; 127
    1fa0:	3f 2e       	mov	r3, r31
    1fa2:	36 fe       	sbrs	r3, 6
    1fa4:	0d c0       	rjmp	.+26     	; 0x1fc0 <vfprintf+0x2ca>
    1fa6:	23 2d       	mov	r18, r3
    1fa8:	2e 7f       	andi	r18, 0xFE	; 254
    1faa:	a2 2e       	mov	r10, r18
    1fac:	89 14       	cp	r8, r9
    1fae:	58 f4       	brcc	.+22     	; 0x1fc6 <vfprintf+0x2d0>
    1fb0:	34 fe       	sbrs	r3, 4
    1fb2:	0b c0       	rjmp	.+22     	; 0x1fca <vfprintf+0x2d4>
    1fb4:	32 fc       	sbrc	r3, 2
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <vfprintf+0x2d4>
    1fb8:	83 2d       	mov	r24, r3
    1fba:	8e 7e       	andi	r24, 0xEE	; 238
    1fbc:	a8 2e       	mov	r10, r24
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <vfprintf+0x2d4>
    1fc0:	b8 2c       	mov	r11, r8
    1fc2:	a3 2c       	mov	r10, r3
    1fc4:	03 c0       	rjmp	.+6      	; 0x1fcc <vfprintf+0x2d6>
    1fc6:	b8 2c       	mov	r11, r8
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <vfprintf+0x2d6>
    1fca:	b9 2c       	mov	r11, r9
    1fcc:	a4 fe       	sbrs	r10, 4
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <vfprintf+0x2f8>
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e8 0d       	add	r30, r8
    1fd4:	f1 1d       	adc	r31, r1
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 33       	cpi	r24, 0x30	; 48
    1fda:	21 f4       	brne	.+8      	; 0x1fe4 <vfprintf+0x2ee>
    1fdc:	9a 2d       	mov	r25, r10
    1fde:	99 7e       	andi	r25, 0xE9	; 233
    1fe0:	a9 2e       	mov	r10, r25
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <vfprintf+0x300>
    1fe4:	a2 fe       	sbrs	r10, 2
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <vfprintf+0x2fe>
    1fe8:	b3 94       	inc	r11
    1fea:	b3 94       	inc	r11
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <vfprintf+0x300>
    1fee:	8a 2d       	mov	r24, r10
    1ff0:	86 78       	andi	r24, 0x86	; 134
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <vfprintf+0x300>
    1ff4:	b3 94       	inc	r11
    1ff6:	a3 fc       	sbrc	r10, 3
    1ff8:	11 c0       	rjmp	.+34     	; 0x201c <vfprintf+0x326>
    1ffa:	a0 fe       	sbrs	r10, 0
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <vfprintf+0x314>
    1ffe:	b2 14       	cp	r11, r2
    2000:	88 f4       	brcc	.+34     	; 0x2024 <vfprintf+0x32e>
    2002:	28 0c       	add	r2, r8
    2004:	92 2c       	mov	r9, r2
    2006:	9b 18       	sub	r9, r11
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <vfprintf+0x330>
    200a:	b2 14       	cp	r11, r2
    200c:	60 f4       	brcc	.+24     	; 0x2026 <vfprintf+0x330>
    200e:	b6 01       	movw	r22, r12
    2010:	80 e2       	ldi	r24, 0x20	; 32
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    2018:	b3 94       	inc	r11
    201a:	f7 cf       	rjmp	.-18     	; 0x200a <vfprintf+0x314>
    201c:	b2 14       	cp	r11, r2
    201e:	18 f4       	brcc	.+6      	; 0x2026 <vfprintf+0x330>
    2020:	2b 18       	sub	r2, r11
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <vfprintf+0x332>
    2024:	98 2c       	mov	r9, r8
    2026:	21 2c       	mov	r2, r1
    2028:	a4 fe       	sbrs	r10, 4
    202a:	10 c0       	rjmp	.+32     	; 0x204c <vfprintf+0x356>
    202c:	b6 01       	movw	r22, r12
    202e:	80 e3       	ldi	r24, 0x30	; 48
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    2036:	a2 fe       	sbrs	r10, 2
    2038:	17 c0       	rjmp	.+46     	; 0x2068 <vfprintf+0x372>
    203a:	a1 fc       	sbrc	r10, 1
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <vfprintf+0x34e>
    203e:	88 e7       	ldi	r24, 0x78	; 120
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <vfprintf+0x352>
    2044:	88 e5       	ldi	r24, 0x58	; 88
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	b6 01       	movw	r22, r12
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <vfprintf+0x36e>
    204c:	8a 2d       	mov	r24, r10
    204e:	86 78       	andi	r24, 0x86	; 134
    2050:	59 f0       	breq	.+22     	; 0x2068 <vfprintf+0x372>
    2052:	a1 fe       	sbrs	r10, 1
    2054:	02 c0       	rjmp	.+4      	; 0x205a <vfprintf+0x364>
    2056:	8b e2       	ldi	r24, 0x2B	; 43
    2058:	01 c0       	rjmp	.+2      	; 0x205c <vfprintf+0x366>
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	a7 fc       	sbrc	r10, 7
    205e:	8d e2       	ldi	r24, 0x2D	; 45
    2060:	b6 01       	movw	r22, r12
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    2068:	89 14       	cp	r8, r9
    206a:	38 f4       	brcc	.+14     	; 0x207a <vfprintf+0x384>
    206c:	b6 01       	movw	r22, r12
    206e:	80 e3       	ldi	r24, 0x30	; 48
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    2076:	9a 94       	dec	r9
    2078:	f7 cf       	rjmp	.-18     	; 0x2068 <vfprintf+0x372>
    207a:	8a 94       	dec	r8
    207c:	f3 01       	movw	r30, r6
    207e:	e8 0d       	add	r30, r8
    2080:	f1 1d       	adc	r31, r1
    2082:	80 81       	ld	r24, Z
    2084:	b6 01       	movw	r22, r12
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    208c:	81 10       	cpse	r8, r1
    208e:	f5 cf       	rjmp	.-22     	; 0x207a <vfprintf+0x384>
    2090:	22 20       	and	r2, r2
    2092:	09 f4       	brne	.+2      	; 0x2096 <vfprintf+0x3a0>
    2094:	42 ce       	rjmp	.-892    	; 0x1d1a <vfprintf+0x24>
    2096:	b6 01       	movw	r22, r12
    2098:	80 e2       	ldi	r24, 0x20	; 32
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <fputc>
    20a0:	2a 94       	dec	r2
    20a2:	f6 cf       	rjmp	.-20     	; 0x2090 <vfprintf+0x39a>
    20a4:	f6 01       	movw	r30, r12
    20a6:	86 81       	ldd	r24, Z+6	; 0x06
    20a8:	97 81       	ldd	r25, Z+7	; 0x07
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <vfprintf+0x3ba>
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	9f ef       	ldi	r25, 0xFF	; 255
    20b0:	2b 96       	adiw	r28, 0x0b	; 11
    20b2:	e2 e1       	ldi	r30, 0x12	; 18
    20b4:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__epilogue_restores__>

000020b8 <strnlen_P>:
    20b8:	fc 01       	movw	r30, r24
    20ba:	05 90       	lpm	r0, Z+
    20bc:	61 50       	subi	r22, 0x01	; 1
    20be:	70 40       	sbci	r23, 0x00	; 0
    20c0:	01 10       	cpse	r0, r1
    20c2:	d8 f7       	brcc	.-10     	; 0x20ba <strnlen_P+0x2>
    20c4:	80 95       	com	r24
    20c6:	90 95       	com	r25
    20c8:	8e 0f       	add	r24, r30
    20ca:	9f 1f       	adc	r25, r31
    20cc:	08 95       	ret

000020ce <strnlen>:
    20ce:	fc 01       	movw	r30, r24
    20d0:	61 50       	subi	r22, 0x01	; 1
    20d2:	70 40       	sbci	r23, 0x00	; 0
    20d4:	01 90       	ld	r0, Z+
    20d6:	01 10       	cpse	r0, r1
    20d8:	d8 f7       	brcc	.-10     	; 0x20d0 <strnlen+0x2>
    20da:	80 95       	com	r24
    20dc:	90 95       	com	r25
    20de:	8e 0f       	add	r24, r30
    20e0:	9f 1f       	adc	r25, r31
    20e2:	08 95       	ret

000020e4 <fputc>:
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	fb 01       	movw	r30, r22
    20ee:	23 81       	ldd	r18, Z+3	; 0x03
    20f0:	21 fd       	sbrc	r18, 1
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <fputc+0x16>
    20f4:	8f ef       	ldi	r24, 0xFF	; 255
    20f6:	9f ef       	ldi	r25, 0xFF	; 255
    20f8:	2c c0       	rjmp	.+88     	; 0x2152 <fputc+0x6e>
    20fa:	22 ff       	sbrs	r18, 2
    20fc:	16 c0       	rjmp	.+44     	; 0x212a <fputc+0x46>
    20fe:	46 81       	ldd	r20, Z+6	; 0x06
    2100:	57 81       	ldd	r21, Z+7	; 0x07
    2102:	24 81       	ldd	r18, Z+4	; 0x04
    2104:	35 81       	ldd	r19, Z+5	; 0x05
    2106:	42 17       	cp	r20, r18
    2108:	53 07       	cpc	r21, r19
    210a:	44 f4       	brge	.+16     	; 0x211c <fputc+0x38>
    210c:	a0 81       	ld	r26, Z
    210e:	b1 81       	ldd	r27, Z+1	; 0x01
    2110:	9d 01       	movw	r18, r26
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	31 83       	std	Z+1, r19	; 0x01
    2118:	20 83       	st	Z, r18
    211a:	8c 93       	st	X, r24
    211c:	26 81       	ldd	r18, Z+6	; 0x06
    211e:	37 81       	ldd	r19, Z+7	; 0x07
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	37 83       	std	Z+7, r19	; 0x07
    2126:	26 83       	std	Z+6, r18	; 0x06
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <fputc+0x6e>
    212a:	8b 01       	movw	r16, r22
    212c:	ec 01       	movw	r28, r24
    212e:	fb 01       	movw	r30, r22
    2130:	00 84       	ldd	r0, Z+8	; 0x08
    2132:	f1 85       	ldd	r31, Z+9	; 0x09
    2134:	e0 2d       	mov	r30, r0
    2136:	09 95       	icall
    2138:	89 2b       	or	r24, r25
    213a:	e1 f6       	brne	.-72     	; 0x20f4 <fputc+0x10>
    213c:	d8 01       	movw	r26, r16
    213e:	16 96       	adiw	r26, 0x06	; 6
    2140:	8d 91       	ld	r24, X+
    2142:	9c 91       	ld	r25, X
    2144:	17 97       	sbiw	r26, 0x07	; 7
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	17 96       	adiw	r26, 0x07	; 7
    214a:	9c 93       	st	X, r25
    214c:	8e 93       	st	-X, r24
    214e:	16 97       	sbiw	r26, 0x06	; 6
    2150:	ce 01       	movw	r24, r28
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	08 95       	ret

0000215c <__ultoa_invert>:
    215c:	fa 01       	movw	r30, r20
    215e:	aa 27       	eor	r26, r26
    2160:	28 30       	cpi	r18, 0x08	; 8
    2162:	51 f1       	breq	.+84     	; 0x21b8 <__ultoa_invert+0x5c>
    2164:	20 31       	cpi	r18, 0x10	; 16
    2166:	81 f1       	breq	.+96     	; 0x21c8 <__ultoa_invert+0x6c>
    2168:	e8 94       	clt
    216a:	6f 93       	push	r22
    216c:	6e 7f       	andi	r22, 0xFE	; 254
    216e:	6e 5f       	subi	r22, 0xFE	; 254
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	8f 4f       	sbci	r24, 0xFF	; 255
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	af 4f       	sbci	r26, 0xFF	; 255
    2178:	b1 e0       	ldi	r27, 0x01	; 1
    217a:	3e d0       	rcall	.+124    	; 0x21f8 <__ultoa_invert+0x9c>
    217c:	b4 e0       	ldi	r27, 0x04	; 4
    217e:	3c d0       	rcall	.+120    	; 0x21f8 <__ultoa_invert+0x9c>
    2180:	67 0f       	add	r22, r23
    2182:	78 1f       	adc	r23, r24
    2184:	89 1f       	adc	r24, r25
    2186:	9a 1f       	adc	r25, r26
    2188:	a1 1d       	adc	r26, r1
    218a:	68 0f       	add	r22, r24
    218c:	79 1f       	adc	r23, r25
    218e:	8a 1f       	adc	r24, r26
    2190:	91 1d       	adc	r25, r1
    2192:	a1 1d       	adc	r26, r1
    2194:	6a 0f       	add	r22, r26
    2196:	71 1d       	adc	r23, r1
    2198:	81 1d       	adc	r24, r1
    219a:	91 1d       	adc	r25, r1
    219c:	a1 1d       	adc	r26, r1
    219e:	20 d0       	rcall	.+64     	; 0x21e0 <__ultoa_invert+0x84>
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <__ultoa_invert+0x48>
    21a2:	68 94       	set
    21a4:	3f 91       	pop	r19
    21a6:	2a e0       	ldi	r18, 0x0A	; 10
    21a8:	26 9f       	mul	r18, r22
    21aa:	11 24       	eor	r1, r1
    21ac:	30 19       	sub	r19, r0
    21ae:	30 5d       	subi	r19, 0xD0	; 208
    21b0:	31 93       	st	Z+, r19
    21b2:	de f6       	brtc	.-74     	; 0x216a <__ultoa_invert+0xe>
    21b4:	cf 01       	movw	r24, r30
    21b6:	08 95       	ret
    21b8:	46 2f       	mov	r20, r22
    21ba:	47 70       	andi	r20, 0x07	; 7
    21bc:	40 5d       	subi	r20, 0xD0	; 208
    21be:	41 93       	st	Z+, r20
    21c0:	b3 e0       	ldi	r27, 0x03	; 3
    21c2:	0f d0       	rcall	.+30     	; 0x21e2 <__ultoa_invert+0x86>
    21c4:	c9 f7       	brne	.-14     	; 0x21b8 <__ultoa_invert+0x5c>
    21c6:	f6 cf       	rjmp	.-20     	; 0x21b4 <__ultoa_invert+0x58>
    21c8:	46 2f       	mov	r20, r22
    21ca:	4f 70       	andi	r20, 0x0F	; 15
    21cc:	40 5d       	subi	r20, 0xD0	; 208
    21ce:	4a 33       	cpi	r20, 0x3A	; 58
    21d0:	18 f0       	brcs	.+6      	; 0x21d8 <__ultoa_invert+0x7c>
    21d2:	49 5d       	subi	r20, 0xD9	; 217
    21d4:	31 fd       	sbrc	r19, 1
    21d6:	40 52       	subi	r20, 0x20	; 32
    21d8:	41 93       	st	Z+, r20
    21da:	02 d0       	rcall	.+4      	; 0x21e0 <__ultoa_invert+0x84>
    21dc:	a9 f7       	brne	.-22     	; 0x21c8 <__ultoa_invert+0x6c>
    21de:	ea cf       	rjmp	.-44     	; 0x21b4 <__ultoa_invert+0x58>
    21e0:	b4 e0       	ldi	r27, 0x04	; 4
    21e2:	a6 95       	lsr	r26
    21e4:	97 95       	ror	r25
    21e6:	87 95       	ror	r24
    21e8:	77 95       	ror	r23
    21ea:	67 95       	ror	r22
    21ec:	ba 95       	dec	r27
    21ee:	c9 f7       	brne	.-14     	; 0x21e2 <__ultoa_invert+0x86>
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	61 05       	cpc	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	08 95       	ret
    21f8:	9b 01       	movw	r18, r22
    21fa:	ac 01       	movw	r20, r24
    21fc:	0a 2e       	mov	r0, r26
    21fe:	06 94       	lsr	r0
    2200:	57 95       	ror	r21
    2202:	47 95       	ror	r20
    2204:	37 95       	ror	r19
    2206:	27 95       	ror	r18
    2208:	ba 95       	dec	r27
    220a:	c9 f7       	brne	.-14     	; 0x21fe <__ultoa_invert+0xa2>
    220c:	62 0f       	add	r22, r18
    220e:	73 1f       	adc	r23, r19
    2210:	84 1f       	adc	r24, r20
    2212:	95 1f       	adc	r25, r21
    2214:	a0 1d       	adc	r26, r0
    2216:	08 95       	ret

00002218 <eeprom_read_byte>:
    2218:	f9 99       	sbic	0x1f, 1	; 31
    221a:	fe cf       	rjmp	.-4      	; 0x2218 <eeprom_read_byte>
    221c:	92 bd       	out	0x22, r25	; 34
    221e:	81 bd       	out	0x21, r24	; 33
    2220:	f8 9a       	sbi	0x1f, 0	; 31
    2222:	99 27       	eor	r25, r25
    2224:	80 b5       	in	r24, 0x20	; 32
    2226:	08 95       	ret

00002228 <eeprom_read_dword>:
    2228:	a6 e1       	ldi	r26, 0x16	; 22
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	44 e0       	ldi	r20, 0x04	; 4
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	0c 94 48 11 	jmp	0x2290	; 0x2290 <eeprom_read_blraw>

00002234 <eeprom_update_byte>:
    2234:	26 2f       	mov	r18, r22

00002236 <eeprom_update_r18>:
    2236:	f9 99       	sbic	0x1f, 1	; 31
    2238:	fe cf       	rjmp	.-4      	; 0x2236 <eeprom_update_r18>
    223a:	92 bd       	out	0x22, r25	; 34
    223c:	81 bd       	out	0x21, r24	; 33
    223e:	f8 9a       	sbi	0x1f, 0	; 31
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	00 b4       	in	r0, 0x20	; 32
    2244:	02 16       	cp	r0, r18
    2246:	39 f0       	breq	.+14     	; 0x2256 <eeprom_update_r18+0x20>
    2248:	1f ba       	out	0x1f, r1	; 31
    224a:	20 bd       	out	0x20, r18	; 32
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	fa 9a       	sbi	0x1f, 2	; 31
    2252:	f9 9a       	sbi	0x1f, 1	; 31
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	08 95       	ret

00002258 <eeprom_update_dword>:
    2258:	03 96       	adiw	r24, 0x03	; 3
    225a:	27 2f       	mov	r18, r23
    225c:	0e 94 1b 11 	call	0x2236	; 0x2236 <eeprom_update_r18>
    2260:	0e 94 1a 11 	call	0x2234	; 0x2234 <eeprom_update_byte>
    2264:	25 2f       	mov	r18, r21
    2266:	0e 94 1b 11 	call	0x2236	; 0x2236 <eeprom_update_r18>
    226a:	24 2f       	mov	r18, r20
    226c:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <eeprom_update_r18>

00002270 <eeprom_write_byte>:
    2270:	26 2f       	mov	r18, r22

00002272 <eeprom_write_r18>:
    2272:	f9 99       	sbic	0x1f, 1	; 31
    2274:	fe cf       	rjmp	.-4      	; 0x2272 <eeprom_write_r18>
    2276:	1f ba       	out	0x1f, r1	; 31
    2278:	92 bd       	out	0x22, r25	; 34
    227a:	81 bd       	out	0x21, r24	; 33
    227c:	20 bd       	out	0x20, r18	; 32
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	fa 9a       	sbi	0x1f, 2	; 31
    2284:	f9 9a       	sbi	0x1f, 1	; 31
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	08 95       	ret

0000228c <eeprom_read_block>:
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22

00002290 <eeprom_read_blraw>:
    2290:	fc 01       	movw	r30, r24
    2292:	f9 99       	sbic	0x1f, 1	; 31
    2294:	fe cf       	rjmp	.-4      	; 0x2292 <eeprom_read_blraw+0x2>
    2296:	06 c0       	rjmp	.+12     	; 0x22a4 <eeprom_read_blraw+0x14>
    2298:	f2 bd       	out	0x22, r31	; 34
    229a:	e1 bd       	out	0x21, r30	; 33
    229c:	f8 9a       	sbi	0x1f, 0	; 31
    229e:	31 96       	adiw	r30, 0x01	; 1
    22a0:	00 b4       	in	r0, 0x20	; 32
    22a2:	0d 92       	st	X+, r0
    22a4:	41 50       	subi	r20, 0x01	; 1
    22a6:	50 40       	sbci	r21, 0x00	; 0
    22a8:	b8 f7       	brcc	.-18     	; 0x2298 <eeprom_read_blraw+0x8>
    22aa:	08 95       	ret

000022ac <__prologue_saves__>:
    22ac:	2f 92       	push	r2
    22ae:	3f 92       	push	r3
    22b0:	4f 92       	push	r4
    22b2:	5f 92       	push	r5
    22b4:	6f 92       	push	r6
    22b6:	7f 92       	push	r7
    22b8:	8f 92       	push	r8
    22ba:	9f 92       	push	r9
    22bc:	af 92       	push	r10
    22be:	bf 92       	push	r11
    22c0:	cf 92       	push	r12
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	ca 1b       	sub	r28, r26
    22d6:	db 0b       	sbc	r29, r27
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	09 94       	ijmp

000022e4 <__epilogue_restores__>:
    22e4:	2a 88       	ldd	r2, Y+18	; 0x12
    22e6:	39 88       	ldd	r3, Y+17	; 0x11
    22e8:	48 88       	ldd	r4, Y+16	; 0x10
    22ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22f6:	b9 84       	ldd	r11, Y+9	; 0x09
    22f8:	c8 84       	ldd	r12, Y+8	; 0x08
    22fa:	df 80       	ldd	r13, Y+7	; 0x07
    22fc:	ee 80       	ldd	r14, Y+6	; 0x06
    22fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2300:	0c 81       	ldd	r16, Y+4	; 0x04
    2302:	1b 81       	ldd	r17, Y+3	; 0x03
    2304:	aa 81       	ldd	r26, Y+2	; 0x02
    2306:	b9 81       	ldd	r27, Y+1	; 0x01
    2308:	ce 0f       	add	r28, r30
    230a:	d1 1d       	adc	r29, r1
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	ed 01       	movw	r28, r26
    2318:	08 95       	ret

0000231a <_exit>:
    231a:	f8 94       	cli

0000231c <__stop_program>:
    231c:	ff cf       	rjmp	.-2      	; 0x231c <__stop_program>
